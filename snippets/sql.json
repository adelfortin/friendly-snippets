{
    "qt": {
        "prefix": "qt",
        "body": [
            "-----------------",
            "-- QUESTION N° ${1:number}",
            "-----------------",
            ""
        ],
        "description": "Snippet for adding a question section with number"
    },
    "qz": {
        "prefix": "qz",
        "body": [
            "-----------------",
            "-- ${1:title}",
            "-----------------",
            ""
        ],
        "description": "Snippet for adding a generic section"
    },
    "sela": {
        "prefix": "sela",
        "body": [
            "SELECT * FROM ${1:table};"
        ],
        "description": "Select all from a table"
    },
    "join": {
        "prefix": "join",
        "body": [
            "SELECT *",
            "FROM ${1:tab1_name} ${2:alias1}",
            "\tJOIN ${3:tab2_name} ${4:alias2} ON ${2:alias1}.${5:cle} = ${4:alias2}.${6:cle};"
        ],
        "description": "Snippet for JOIN"
    },
    "join2": {
        "prefix": "join2",
        "body": [
            "SELECT ${1:col}, ${2:col2}",
            "FROM ${3:tableA} A, ${4:tableB} B",
            "WHERE A.${5:cle} = B.${6:cle};"
        ],
        "description": "Snippet for multi-table SELECT with implicit join"
    },
    "ljoin": {
        "prefix": "ljoin",
        "body": [
            "SELECT *",
            "FROM ${1:tab1_name} ${2:alias1}",
            "\tLEFT JOIN ${3:tab2_name} ${4:alias2} ON ${2:alias1}.${5:cle} = ${4:alias2}.${6:cle};"
        ],
        "description": "Snippet for LEFT JOIN"
    },
    "rjoin": {
        "prefix": "rjoin",
        "body": [
            "SELECT *",
            "FROM ${1:tab1_name} ${2:alias1}",
            "\tRIGHT JOIN ${3:tab2_name} ${4:alias2} ON ${2:alias1}.${5:cle} = ${4:alias2}.${6:cle};"
        ],
        "description": "Snippet for RIGHT JOIN"
    },
    "fout": {
        "prefix": "fout",
        "body": [
            "SELECT ${1:col}",
            "FROM ${2:tab1_name} ${3:alias1}",
            "\tFULL OUTER JOIN ${4:table2_name} ${5:alias2} ON ${3:alias1}.${6:cle} = ${5:alias2}.${7:cle}",
            "WHERE ${3:alias1}.${8:cle} IS NULL OR ${5:alias2}.${9:cle} IS NULL;"
        ],
        "description": "Snippet for FULL OUTER JOIN"
    },
    "where": {
        "prefix": "where",
        "body": [
            "SELECT *",
            "FROM ${1:tab_name}",
            "WHERE ${2:conditions};"
        ],
        "description": "Snippet for WHERE clause"
    },
    "group": {
        "prefix": "group",
        "body": [
            "SELECT ${1:col1}, ${2:col2}",
            "FROM ${3:table_name}",
            "GROUP BY ${1:col1}, ${2:col2};"
        ],
        "description": "Snippet for GROUP BY"
    },
    "having": {
        "prefix": "having",
        "body": [
            "SELECT ${1:col1}, ${2:col2}",
            "FROM ${3:table_name}",
            "HAVING ${4:conditions};"
        ],
        "description": "Snippet for HAVING clause"
    },
    "havg": {
        "prefix": "havg",
        "body": [
            "SELECT ${1:col1}, ${2:col2}",
            "FROM ${3:table_name}",
            "HAVING ${4:conditions}",
            "GROUP BY ${1:col1}, ${2:col2};"
        ],
        "description": "Snippet for HAVING and GROUP BY"
    },
    "order": {
        "prefix": "order",
        "body": [
            "SELECT ${1:col1}, ${2:col2}",
            "FROM ${3:table_name}",
            "HAVING ${4:conditions}",
            "GROUP BY ${1:col1}, ${2:col2}",
            "ORDER BY ${5:cle};"
        ],
        "description": "Snippet for ORDER BY clause"
    },
    "gb": {
        "prefix": "gb",
        "body": ["GROUP BY ${1:column}"],
        "description": "Group by column"
    },
    "ob": {
        "prefix": "ob",
        "body": ["ORDER BY ${1:column}"],
        "description": "Order by column"
    },
    "if": {
        "prefix": "if",
        "body": ["IF NOT EXISTS ${1:condition};"],
        "description": "IF NOT EXISTS condition"
    },
    "check": {
        "prefix": "check",
        "body": ["CHECK (${1:condition})"],
        "description": "Snippet for CHECK constraint"
    },
    "add": {
        "prefix": "add",
        "body": ["ALTER TABLE ${1:table_name} ADD CONSTRAINT ${2:constraint};"],
        "description": "Add constraint to a table"
    },
    "seq": {
        "prefix": "seq",
        "body": ["CREATE SEQUENCE IF NOT EXISTS ${1:sequence_name}_seq;"],
        "description": "Create sequence if not exists"
    },
    "view": {
        "prefix": "view",
        "body": [
            "CREATE VIEW ${1:view_name} AS",
            "\tSELECT *",
            "\tFROM ${2:table}",
            "\tWHERE ${3:condition};",
            "",
            "SELECT * FROM ${1:view_name};"
        ],
        "description": "Create SQL view"
    },
    "table": {
        "prefix": "table",
        "body": [
            "CREATE TABLE IF NOT EXISTS ${1:table_name} (",
            "\t${2:col1} ${3:TYPE},",
            "\t${4:col2} ${5:TYPE},",
            "\t${6:col3} ${7:TYPE}",
            ");"
        ],
        "description": "Create SQL table"
    },
    "dt": {
        "prefix": "dt",
        "body": ["DROP TABLE IF EXISTS ${1:table_name} CASCADE;"],
        "description": "Drop table if exists"
    },
    "dl": {
        "prefix": "dl",
        "body": [
            "DELETE FROM ${1:table_name}",
            "WHERE ${2:condition};"
        ],
        "description": "Delete row from a table"
    },
    "ds": {
        "prefix": "ds",
        "body": ["DROP SEQUENCE IF EXISTS ${1:sequence_name} CASCADE;"],
        "description": "Drop sequence if exists"
    },
    "dv": {
        "prefix": "dv",
        "body": ["DROP VIEW IF EXISTS ${1:view_name};"],
        "description": "Drop view if exists"
    },
    "update": {
        "prefix": "update",
        "body": [
            "UPDATE ${1:table_name}",
            "\tSET ${2:col1} = ${3:value1}, ${4:col2} = ${5:value2}",
            "\tWHERE ${6:condition};"
        ],
        "description": "Update table row"
    },
    "insert": {
        "prefix": "insert",
        "body": [
            "INSERT INTO ${1:table_name}(${2:col1}, ${3:col2})",
            "VALUES (${4:value1}, ${5:value2});"
        ],
        "description": "Insert values into table"
    },
    "df": {
        "prefix": "df",
        "body": [
            "DELETE FROM ${1:table_name}",
            "WHERE ${2:condition};"
        ],
        "description": "Delete from table with condition"
    },
    "pkc": {
        "prefix": "pkc",
        "body": [
            "CONSTRAINT ${1:pk_name} PRIMARY KEY(${2:column})"
        ],
        "description": "Primary key constraint"
    },
    "fkc": {
        "prefix": "fkc",
        "body": [
            "CONSTRAINT ${1:fk_name} FOREIGN KEY(${2:column}) REFERENCES ${3:ref_table}(${4:ref_column})"
        ],
        "description": "Foreign key constraint"
    },
    "pk": {
        "prefix": "pk",
        "body": [
            "${1:pk_name} PRIMARY KEY(${2:column})"
        ],
        "description": "Primary key"
    },
    "fk": {
        "prefix": "fk",
        "body": [
            "${1:fk_name} FOREIGN KEY(${2:column}) REFERENCES ${3:ref_table}(${4:ref_column})"
        ],
        "description": "Foreign key"
    },
    "date": {
        "prefix": "date",
        "body": ["DATE NOT NULL"],
        "description": "Date type with NOT NULL"
    },
    "timestamp": {
        "prefix": "timestamp",
        "body": ["TIMESTAMP NOT NULL"],
        "description": "Timestamp type with NOT NULL"
    },
    "var": {
        "prefix": "var",
        "body": ["VARCHAR(${1:length})"],
        "description": "Varchar type"
    },
    "char": {
        "prefix": "char",
        "body": ["CHAR(${1:length})"],
        "description": "Char type"
    },
    "serial": {
        "prefix": "serial",
        "body": ["SERIAL PRIMARY KEY"],
        "description": "Serial primary key"
    },
    "datep": {
        "prefix": "datep",
        "body": ["date_part(${1:text}, ${2:timestamp})"],
        "description": "Date part function"
    },
    "datet": {
        "prefix": "datet",
        "body": ["date_trunc(${1:text}, ${2:timestamp})"],
        "description": "Date truncation function"
    },
    "cd": {
        "prefix": "cd",
        "body": ["CURRENT_DATE"],
        "description": "Current date"
    },
    "upper": {
    "prefix": "upper",
    "body": ["UPPER(${1:column})"],
    "description": "Convertit une chaîne en majuscules"
    },
    "lower": {
    "prefix": "lower",
    "body": ["LOWER(${1:column})"],
    "description": "Convertit une chaîne en minuscules"
    },
    "initcap": {
    "prefix": "initcap",
    "body": ["INITCAP(${1:column})"],
    "description": "Mets en capitales la première lettre de chaque mot"
    },
    "substr": {
    "prefix": "substr",
    "body": ["SUBSTRING(${1:column} FROM ${2:start} FOR ${3:length})"],
    "description": "Extrait une sous-chaîne"
    },
    "substr_from": {
    "prefix": "substr_from",
    "body": ["SUBSTRING(${1:column} FROM ${2:start})"],
    "description": "Extrait une sous-chaîne avec FROM seulement"
    },
    "length": {
    "prefix": "length",
    "body": ["LENGTH(${1:column})"],
    "description": "Renvoie la longueur de la chaîne"
    },
    "rpad": {
    "prefix": "rpad",
    "body": ["RPAD(${1:column}, ${2:total_length}, '${3:padding_char}')"],
    "description": "Remplit la chaîne à droite jusqu'à la longueur spécifiée"
    },
    "printext": {
    "prefix": "printext",
    "body": [
        "-- Snippets de manipulation de texte :",
        "-- upper: Convertit une chaîne en majuscules",
        "-- lower: Convertit une chaîne en minuscules",
        "-- initcap: Mets en capitales la première lettre de chaque mot",
        "-- substr_from: Extrait une sous-chaîne",
        "-- substr: Extrait une sous-chaîne avec longueur défini",
        "-- length: Renvoie la longueur de la chaîne",
        "-- lpad: Remplit la chaîne à gauche",
        "-- rpad: Remplit la chaîne à droite"
    ],
    "description": "Aide-mémoire pour les snippets de manipulation de texte"
    },
    "abs": {
    "prefix": "abs",
    "body": ["ABS(${1:column})"],
    "description": "Renvoie la valeur absolue"
    },
    "mod": {
    "prefix": "mod",
    "body": ["MOD(${1:column}, ${2:divisor})"],
    "description": "Renvoie le reste de la division"
    },
    "round": {
    "prefix": "round",
    "body": ["ROUND(${1:column}, ${2:decimal_places})"],
    "description": "Arrondit un nombre au nombre de décimales spécifié"
    },
    "round_no_dec": {
    "prefix": "round_no_dec",
    "body": ["ROUND(${1:column})"],
    "description": "Arrondit un nombre sans décimales"
    },
    "trunc": {
    "prefix": "trunc",
    "body": ["TRUNC(${1:column}, ${2:decimal_places})"],
    "description": "Tronque un nombre au nombre de décimales spécifié"
    },
    "trunc_no_dec": {
    "prefix": "trunc_no_dec",
    "body": ["TRUNC(${1:column})"],
    "description": "Tronque un nombre sans décimales"
    },
    "power": {
    "prefix": "power",
    "body": ["POWER(${1:column}, ${2:exponent})"],
    "description": "Élève un nombre à la puissance spécifiée"
    },
    "printmath": {
    "prefix": "printmath",
    "body": [
        "-- Snippets de fonctions mathématiques :",
        "-- abs: Renvoie la valeur absolue",
        "-- mod: Renvoie le reste de la division (modulo)",
        "-- round: Arrondit un nombre avec décimales",
        "-- round_no_dec: Arrondit un nombre sans décimales",
        "-- trunc: Tronque un nombre avec décimales",
        "-- trunc_no_dec: Tronque un nombre sans décimales",
        "-- power: Élève un nombre à la puissance spécifiée"
    ],
    "description": "Aide-mémoire pour les fonctions mathématiques"
    },
    "where_equal": {
    "prefix": "where_equal",
    "body": ["WHERE ${1:column} = ${2|cond,'cond','\"cond\"|}"],
    "description": "Condition WHERE avec égalité"
    },
    "where_not_equal": {
    "prefix": "where_not_equal",
    "body": [
        "WHERE ${1:column} ${2|<>,!=|} ${3|cond,'cond','\"cond\"|}"
    ],
    "description": "Condition WHERE avec inégalité"
    },
    "where_less_than": {
    "prefix": "where_lt",
    "body": ["WHERE ${1:column} < ${2|cond,'cond','\"cond\"|}"],
    "description": "Condition WHERE avec inférieur à"
    },
    "where_greater_than": {
    "prefix": "where_gt",
    "body": ["WHERE ${1:column} > ${2|cond,'cond','\"cond\"|}"],
    "description": "Condition WHERE avec supérieur à"
    },
    "where_less_equal": {
    "prefix": "where_le",
    "body": ["WHERE ${1:column} <= ${2|cond,'cond','\"cond\"|}"],
    "description": "Condition WHERE avec inférieur ou égal"
    },
    "where_greater_equal": {
    "prefix": "where_ge",
    "body": ["WHERE ${1:column} >= ${2|cond,'cond','\"cond\"|}"],
    "description": "Condition WHERE avec supérieur ou égal"
    },
    "where_in": {
    "prefix": "where_in",
    "body": [
        "WHERE ${1:column} IN (${2|'cond1', 'cond2', 'cond3'|})"
    ],
    "description": "Condition WHERE avec IN"
    },
    "where_is_null": {
    "prefix": "where_is_null",
    "body": ["WHERE ${1:column} IS NULL"],
    "description": "Condition WHERE avec IS NULL"
    },
    "where_is_not_null": {
    "prefix": "where_is_not_null",
    "body": ["WHERE ${1:column} IS NOT NULL"],
    "description": "Condition WHERE avec IS NOT NULL"
    },
    "where_between": {
    "prefix": "where_between",
    "body": [
        "WHERE ${1:column} BETWEEN ${2|cond1,'cond1','\"cond1\"|} AND ${3|cond2,'cond2','\"cond2\"|}"
    ],
    "description": "Condition WHERE avec BETWEEN"
    },
    "where_not_between": {
    "prefix": "where_not_between",
    "body": [
        "WHERE ${1:column} NOT BETWEEN ${2|cond1,'cond1','\"cond1\"|} AND ${3|cond2,'cond2','\"cond2\"|}"
    ],
    "description": "Condition WHERE avec NOT BETWEEN"
    },
    "where_like": {
    "prefix": "where_like",
    "body": [
        "WHERE ${1:column} LIKE ${2|'%cond%', '_cond_'|}"
    ],
    "description": "Condition WHERE avec LIKE"
    },
    "where_and_or": {
    "prefix": "where_and_or",
    "body": [
        "WHERE (${1:cond1} OR ${2:cond2}) AND ${3:cond3}"
    ],
    "description": "Condition WHERE avec AND et OR"
    },
    "where_or_and": {
    "prefix": "where_or_and",
    "body": [
        "WHERE ${1:cond1} OR (${2:cond2} AND ${3:cond3})"
    ],
    "description": "Condition WHERE avec OR et AND imbriqués"
    },
    "printwhere": {
    "prefix": "printwhere",
    "body": [
        "-- Snippets des clauses WHERE :",
        "-- where_equal: Condition d'égalité",
        "-- where_not_equal: Condition de non-égalité (<>, !=)",
        "-- where_less_than: Condition inférieur à",
        "-- where_greater_than: Condition supérieur à",
        "-- where_less_equal: Condition inférieur ou égal",
        "-- where_greater_equal: Condition supérieur ou égal",
        "-- where_in: Condition IN",
        "-- where_is_null: Condition IS NULL",
        "-- where_is_not_null: Condition IS NOT NULL",
        "-- where_between: Condition BETWEEN",
        "-- where_not_between: Condition NOT BETWEEN",
        "-- where_like: Condition LIKE avec % et _",
        "-- where_and_or: Condition AND avec OR imbriqués",
        "-- where_or_and: Condition OR avec AND imbriqués"
    ],
    "description": "Aide-mémoire des clauses WHERE"
    }
}
