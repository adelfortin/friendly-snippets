{
    "aide": {
        "prefix": "aide",
        "body": [
            "-- Liste des commandes d'aide disponibles :",
            "-- printquestion : Aide-mémoire pour les questions et sections SQL.",
            "-- printlidgen : Aide-mémoire pour les snippets de langage d'interrogation des données.",
            "-- printlddgen : Aide-mémoire pour les snippets de langage de définition des données.",
            "-- printlmdgen : Aide-mémoire pour les snippets de langage de modification des données.",
            "-- printext : Aide-mémoire pour les snippets de manipulation de texte.",
            "-- printmath : Aide-mémoire pour les fonctions mathématiques.",
            "-- printwhere : Aide-mémoire pour les clauses WHERE.",
            "-- printmiseenpage : Aide-mémoire pour les snippets de mise en page SQL.",
            "-- printdate : Aide-mémoire pour les snippets de gestion des dates et heures.",
            "-- printjoin : Aide-mémoire pour les snippets de jointures et opérations d'ensembles.",
            "-- printgroup : Aide-mémoire pour les fonctions de groupe en SQL.",
            "-- printhaving : Aide-mémoire pour les clauses HAVING.",
            "-- printcond : Aide-mémoire pour les conditions avancées en SQL.",
            "-- print_create : Aide-mémoire pour les opérations CREATE et colonnes.",
            "-- print_alter : Aide-mémoire pour les opérations ALTER.",
            "-- print_drop : Aide-mémoire pour les opérations DROP.",
            "-- print_insert : Aide-mémoire pour les opérations INSERT.",
            "-- print_update : Aide-mémoire pour les opérations UPDATE.",
            "-- print_delete : Aide-mémoire pour les opérations DELETE.",
            "-- print_view : Aide-mémoire pour les opérations sur les VUES.",
            "-- print_schema : Aide-mémoire pour la gestion des schémas et des données PostgreSQL."
        ],
        "description": "Aide-mémoire pour toutes les commandes d'aide disponibles dans le fichier."
    },
    "qt": {
        "prefix": "qt",
        "body": [
            "-----------------",
            "-- QUESTION N° ${1:number}",
            "-----------------",
            ""
        ],
        "description": "Snippet pour ajouter une question avec un nombre"
    },
    "qz": {
        "prefix": "qz",
        "body": [
            "-----------------",
            "-- ${1:title}",
            "-----------------",
            ""
        ],
        "description": "Snippet pour ajouter une section ou un titre"
    },
    "qt1": {
        "prefix": "qt1",
        "body": [
            "-----------------",
            "-- QUESTION N° 1",
            "-----------------",
            ""
        ],
        "description": "Snippet pour ajouter la question N° 1"
    },
    "qt2": {
        "prefix": "qt2",
        "body": [
            "-----------------",
            "-- QUESTION N° 2",
            "-----------------",
            ""
        ],
        "description": "Snippet pour ajouter la question N° 2"
    },
    "qt3": {
        "prefix": "qt3",
        "body": [
            "-----------------",
            "-- QUESTION N° 3",
            "-----------------",
            ""
        ],
        "description": "Snippet pour ajouter la question N° 3"
    },
    "qt4": {
        "prefix": "qt4",
        "body": [
            "-----------------",
            "-- QUESTION N° 4",
            "-----------------",
            ""
        ],
        "description": "Snippet pour ajouter la question N° 4"
    },
    "qt5": {
        "prefix": "qt5",
        "body": [
            "-----------------",
            "-- QUESTION N° 5",
            "-----------------",
            ""
        ],
        "description": "Snippet pour ajouter la question N° 5"
    },
    "qt6": {
        "prefix": "qt6",
        "body": [
            "-----------------",
            "-- QUESTION N° 6",
            "-----------------",
            ""
        ],
        "description": "Snippet pour ajouter la question N° 6"
    },
    "qt7": {
        "prefix": "qt7",
        "body": [
            "-----------------",
            "-- QUESTION N° 7",
            "-----------------",
            ""
        ],
        "description": "Snippet pour ajouter la question N° 7"
    },
    "qt8": {
        "prefix": "qt8",
        "body": [
            "-----------------",
            "-- QUESTION N° 8",
            "-----------------",
            ""
        ],
        "description": "Snippet pour ajouter la question N° 8"
    },
    "qt9": {
        "prefix": "qt9",
        "body": [
            "-----------------",
            "-- QUESTION N° 9",
            "-----------------",
            ""
        ],
        "description": "Snippet pour ajouter la question N° 9"
    },
    "qz_lid": {
        "prefix": "qz_lid",
        "body": [
            "-----------------------------------------",
            "-- Langage d'Interrogation des Données",
            "-----------------------------------------",
            ""
        ],
        "description": "Section pour Langage d'Interrogation des Données (LID)"
    },
    "qz_ldd": {
        "prefix": "qz_ldd",
        "body": [
            "-----------------------------------------",
            "-- Langage de Définition des Données",
            "-----------------------------------------",
            ""
        ],
        "description": "Section pour Langage de Définition des Données (LDD)"
    },
    "qz_lmd": {
        "prefix": "qz_lmd",
        "body": [
            "-----------------------------------------",
            "-- Langage de Manipulation des Données",
            "-----------------------------------------",
            ""
        ],
        "description": "Section pour Langage de Manipulation des Données (LMD)"
    },
    "printquestion": {
        "prefix": "printquestion",
        "body": [
            "-- Snippets pour les questions et sections SQL :",
            "-- qt1 à qt9 : Question numérotée de 1 à 9",
            "-- qz_lid : Section pour Langage d'Interrogation des Données",
            "-- qz_ldd : Section pour Langage de Définition des Données",
            "-- qz_lmd : Section pour Langage de Manipulation des Données"
        ],
        "description": "Aide-mémoire pour les questions et sections SQL"
    },
    "sela": {
        "prefix": "sela",
        "body": [
            "SELECT * FROM ${1:table};"
        ],
        "description": "Faire un SELECT de tout les éléments de la table"
    },
    "where": {
        "prefix": "where",
        "body": [
            "SELECT *",
            "\tFROM ${1:tab_name}",
            "\t\tWHERE ${2:conditions}",
            "\t\t\t;"
        ],
        "description": "Snippet pour les clauses WHERE"
    },
    "group": {
        "prefix": "group",
        "body": [
            "SELECT ${1:col1}, ${2:col2}",
            "\tFROM ${3:table_name}",
            "\t\tGROUP BY ${1:col1}, ${2:col2};",
            "\t\t\t;"
        ],
        "description": "Snippet pour les GROUP BY"
    },
    "having": {
        "prefix": "having",
        "body": [
            "SELECT ${1:col1}, ${2:col2}",
            "\tFROM ${3:table_name}",
            "\t\tHAVING ${4:conditions};",
            "\t\t\t;"
        ],
        "description": "Snippet pour les clauses HAVING"
    },
    "havg": {
    "prefix": "havg",
    "body": [
    "SELECT ${1:col1}, ${2:col2}",
    "\tFROM ${3:table_name}",
    "\t\tGROUP BY ${1:col1}, ${2:col2};",
    "\t\t\tHAVING ${4:conditions}",
    "\t\t\t\t;"
    ],
    "description": "Snippet avec un cas présentant un HAVING avec un GROUP BY"
    },
    "order": {
    "prefix": "order",
    "body": [
    "SELECT ${1:col1}, ${2:col2}",
    "\tFROM ${3:table_name}",
    "\t\tGROUP BY ${1:col1}, ${2:col2}",
    "\t\t\tHAVING ${4:conditions}",
    "\t\t\t\tORDER BY ${5:cle};",
    "\t\t\t\t\t;"
    ],
    "description": "Snippet avec un cas présentant un HAVING avec un GROUP BY et un ORDER BY"
    },
    "gb": {
        "prefix": "gb",
        "body": ["\t\tGROUP BY ${1:column}"],
        "description": "Faire un GROUP BY par colonne"
    },
    "ob": {
        "prefix": "ob",
        "body": ["\t\tORDER BY ${1:column}"],
        "description": "Faire un ORDER BY par colonne"
    },
    "if": {
        "prefix": "if",
        "body": ["IF NOT EXISTS ${1:condition};"],
        "description": "condition IF NOT EXISTS"
    },
    "printlidgen": {
    "prefix": "printlidgen",
    "body": [
        "-- Snippets generaux pour le langage d'interrogation des données  :",
        "-- sela: Faire un SELECT de tout les éléments de la table",
        "-- where : Snippet pour les clauses WHERE",
        "-- group: Snippet pour les GROUP BY",
        "-- having: Snippet pour les clauses HAVING",
        "-- havg: Snippet avec un cas présentant un HAVING avec un GROUP BY",
        "-- order: Snippet avec un cas présentant un HAVING avec un GROUP BY et un ORDER BY",
        "-- gb: Faire un GROUP BY par colonne",
        "-- ob: Faire un ORDER BY par colonne",
        "-- if: condition IF NOT EXISTS"
    ],
    "description": "Aide-mémoire pour les snippets de manipulation de texte"
    },
    "check": {
        "prefix": "check",
        "body": ["CHECK (${1:condition})"],
        "description": "Snippet pour une contrainte de CHECK"
    },
    "add": {
        "prefix": "add",
        "body": ["ALTER TABLE ${1:table_name} ADD CONSTRAINT ${2:constraint};"],
        "description": "Ajout d'une contrainte à une table"
    },
    "seq": {
        "prefix": "seq",
        "body": ["CREATE SEQUENCE IF NOT EXISTS ${1:sequence_name}_seq;"],
        "description": "Créer une séquence si celle-ci n'existe pas"
    },
    "view": {
        "prefix": "view",
        "body": [
            "CREATE VIEW ${1:view_name} AS",
            "\tSELECT *",
            "\t\tFROM ${2:table}",
            "\t\t\tWHERE ${3:condition};",
            "\t\t\t\t;"
        ],
        "description": "Créer et vérifier une vue SQL"
    },
    "table": {
        "prefix": "table",
        "body": [
            "CREATE TABLE IF NOT EXISTS ${1:table_name} (",
            "\t${2:col1} ${3:TYPE},",
            "\t\t${4:col2} ${5:TYPE},",
            "\t\t\t${6:col3} ${7:TYPE}",
            "\t\t\t\t);"
        ],
        "description": "Créer une table SQL"
    },
    "dt": {
        "prefix": "dt",
        "body": ["DROP TABLE IF EXISTS ${1:table_name} CASCADE;"],
        "description": "Supprimer une table si elle existe"
    },
    "dl": {
        "prefix": "dl",
        "body": [
            "DELETE FROM ${1:table_name}",
            "\tWHERE ${2:condition};",
            "\t\t;"
        ],
        "description": "Supprimer une ligne d'une table"
    },
    "ds": {
        "prefix": "ds",
        "body": ["DROP SEQUENCE IF EXISTS ${1:sequence_name} CASCADE;"],
        "description": "Supprimer une séquence si elle existe"
    },
    "dv": {
        "prefix": "dv",
        "body": ["DROP VIEW IF EXISTS ${1:view_name};"],
        "description": "Supprimer une vue si elle existe"
    },
    "pkc": {
        "prefix": "pkc",
        "body": [
            "CONSTRAINT ${1:pk_name} PRIMARY KEY(${2:column})"
        ],
        "description": "Contrainte de clé primaire"
    },
    "fkc": {
        "prefix": "fkc",
        "body": [
            "CONSTRAINT ${1:fk_name} FOREIGN KEY(${2:column}) REFERENCES ${3:ref_table}(${4:ref_column})"
        ],
        "description": "Contrainte de clé étrangère"
    },
    "pk": {
        "prefix": "pk",
        "body": [
            "${1:pk_name} PRIMARY KEY(${2:column})"
        ],
        "description": "Clé primaire"
    },
    "fk": {
        "prefix": "fk",
        "body": [
            "${1:fk_name} FOREIGN KEY(${2:column}) REFERENCES ${3:ref_table}(${4:ref_column})"
        ],
        "description": "Clé étrangère"
    },
    "date": {
        "prefix": "date",
        "body": ["DATE NOT NULL"],
        "description": "Type Date avec contrainte NOT NULL"
    },
    "timestamp": {
        "prefix": "timestamp",
        "body": ["TIMESTAMP NOT NULL"],
        "description": "Type Timestamp avec contrainte NOT NULL"
    },
    "var": {
        "prefix": "var",
        "body": ["VARCHAR(${1:length})"],
        "description": "Type Varchar"
    },
    "char": {
        "prefix": "char",
        "body": ["CHAR(${1:length})"],
        "description": "Type Char"
    },
    "serial": {
        "prefix": "serial",
        "body": ["SERIAL PRIMARY KEY"],
        "description": "Clé primaire de type Serial"
    },
    "datep": {
        "prefix": "datep",
        "body": ["date_part(${1:text}, ${2:timestamp})"],
        "description": "Fonction date_part pour extraire une partie d'une date"
    },
    "datet": {
        "prefix": "datet",
        "body": ["date_trunc(${1:text}, ${2:timestamp})"],
        "description": "Fonction date_trunc pour tronquer une date"
    },
    "cd": {
        "prefix": "cd",
        "body": ["CURRENT_DATE"],
        "description": "Date actuelle"
    },
    "printlddgen": {
        "prefix": "printlddgen",
        "body": [
            "-- Snippets généraux pour le langage de définition des données :",
            "-- check: Snippet pour une contrainte de CHECK",
            "-- add: Ajout d'une contrainte à une table",
            "-- seq: Créer une séquence si celle-ci n'existe pas",
            "-- view: Créer et vérifier une vue SQL",
            "-- table: Créer une table SQL",
            "-- dt: Supprimer une table si elle existe",
            "-- dl: Supprimer une ligne d'une table",
            "-- ds: Supprimer une séquence si elle existe",
            "-- dv: Supprimer une vue si elle existe",
            "-- pkc: Contrainte de clé primaire",
            "-- fkc: Contrainte de clé étrangère",
            "-- pk: Clé primaire",
            "-- fk: Clé étrangère",
            "-- date: Type Date avec contrainte NOT NULL",
            "-- timestamp: Type Timestamp avec contrainte NOT NULL",
            "-- var: Type Varchar",
            "-- char: Type Char",
            "-- serial: Clé primaire de type Serial",
            "-- datep: Fonction date_part pour extraire une partie d'une date",
            "-- datet: Fonction date_trunc pour tronquer une date",
            "-- cd: Date actuelle"
        ],
        "description": "Aide-mémoire pour les snippets de langage de définition des données"
    },
    "update": {
        "prefix": "update",
        "body": [
            "UPDATE ${1:table_name}",
            "\tSET ${2:col1} = ${3:value1}, ${4:col2} = ${5:value2}",
            "\tWHERE ${6:condition};",
            "\t\t;"
        ],
        "description": "Mettre à jour une ligne d'une table"
    },
    "insert": {
        "prefix": "insert",
        "body": [
            "INSERT INTO ${1:table_name}(${2:col1}, ${3:col2})",
            "\tVALUES (${4:value1}, ${5:value2});",
            "\t\t;"
        ],
        "description": "Insérer des valeurs dans une table"
    },
    "df": {
        "prefix": "df",
        "body": [
            "DELETE FROM ${1:table_name}",
            "\tWHERE ${2:condition};",
            "\t\t;"
        ],
        "description": "Supprimer des lignes d'une table avec condition"
    },
    "printlmdgen": {
        "prefix": "printlmdgen",
        "body": [
            "-- Snippets généraux pour le langage de modification des données :",
            "-- update: Mettre à jour une ligne d'une table",
            "-- insert: Insérer des valeurs dans une table",
            "-- df: Supprimer des lignes d'une table avec condition"
        ],
        "description": "Aide-mémoire pour les snippets de langage de modification des données"
    },
    "upper": {
    "prefix": "upper",
    "body": ["UPPER(${1:column})"],
    "description": "Convertit une chaîne en majuscules"
    },
    "lower": {
    "prefix": "lower",
    "body": ["LOWER(${1:column})"],
    "description": "Convertit une chaîne en minuscules"
    },
    "initcap": {
    "prefix": "initcap",
    "body": ["INITCAP(${1:column})"],
    "description": "Mets en capitales la première lettre de chaque mot"
    },
    "substr": {
    "prefix": "substr",
    "body": ["SUBSTRING(${1:column} FROM ${2:start} FOR ${3:length})"],
    "description": "Extrait une sous-chaîne"
    },
    "substr_from": {
    "prefix": "substr_from",
    "body": ["SUBSTRING(${1:column} FROM ${2:start})"],
    "description": "Extrait une sous-chaîne avec FROM seulement"
    },
    "length": {
    "prefix": "length",
    "body": ["LENGTH(${1:column})"],
    "description": "Renvoie la longueur de la chaîne"
    },
    "rpad": {
    "prefix": "rpad",
    "body": ["RPAD(${1:column}, ${2:total_length}, '${3:padding_char}')"],
    "description": "Remplit la chaîne à droite jusqu'à la longueur spécifiée"
    },
    "printext": {
    "prefix": "printext",
    "body": [
        "-- Snippets de manipulation de texte :",
        "-- upper: Convertit une chaîne en majuscules",
        "-- lower: Convertit une chaîne en minuscules",
        "-- initcap: Mets en capitales la première lettre de chaque mot",
        "-- substr_from: Extrait une sous-chaîne",
        "-- substr: Extrait une sous-chaîne avec longueur défini",
        "-- length: Renvoie la longueur de la chaîne",
        "-- lpad: Remplit la chaîne à gauche",
        "-- rpad: Remplit la chaîne à droite"
    ],
    "description": "Aide-mémoire pour les snippets de manipulation de texte"
    },
    "abs": {
    "prefix": "abs",
    "body": ["ABS(${1:column})"],
    "description": "Renvoie la valeur absolue"
    },
    "mod": {
    "prefix": "mod",
    "body": ["MOD(${1:column}, ${2:divisor})"],
    "description": "Renvoie le reste de la division"
    },
    "round": {
    "prefix": "round",
    "body": ["ROUND(${1:column}, ${2:decimal_places})"],
    "description": "Arrondit un nombre au nombre de décimales spécifié"
    },
    "round_no_dec": {
    "prefix": "round_no_dec",
    "body": ["ROUND(${1:column})"],
    "description": "Arrondit un nombre sans décimales"
    },
    "trunc": {
    "prefix": "trunc",
    "body": ["TRUNC(${1:column}, ${2:decimal_places})"],
    "description": "Tronque un nombre au nombre de décimales spécifié"
    },
    "trunc_no_dec": {
    "prefix": "trunc_no_dec",
    "body": ["TRUNC(${1:column})"],
    "description": "Tronque un nombre sans décimales"
    },
    "power": {
    "prefix": "power",
    "body": ["POWER(${1:column}, ${2:exponent})"],
    "description": "Élève un nombre à la puissance spécifiée"
    },
    "ceil": {
    "prefix": "ceil",
    "body": ["CEIL(${1:column})"],
    "description": "Arrondir vers le haut avec CEIL"
    },
    "floor": {
    "prefix": "floor",
    "body": ["FLOOR(${1:column})"],
    "description": "Arrondir vers le bas avec FLOOR"
    },
   "printmath": {
    "prefix": "printmath",
    "body": [
        "-- Snippets de fonctions mathématiques :",
        "-- abs: Renvoie la valeur absolue",
        "-- mod: Renvoie le reste de la division (modulo)",
        "-- round: Arrondit un nombre avec décimales",
        "-- round_no_dec: Arrondit un nombre sans décimales",
        "-- trunc: Tronque un nombre avec décimales",
        "-- trunc_no_dec: Tronque un nombre sans décimales",
        "-- power: Élève un nombre à la puissance spécifiée",
        "-- ceil: Arrondit vers le haut",
        "-- floor: Arrondit vers le bas"
    ],
    "description": "Aide-mémoire pour les fonctions mathématiques"
    },
    "where_equal": {
        "prefix": "where_equal",
        "body": [
            "\t\tWHERE ${1:column} = ${2|cond,'cond','\"cond\"|};"
        ],
        "description": "Condition WHERE avec égalité"
    },
    "where_not_equal": {
        "prefix": "where_not_equal",
        "body": [
            "\t\tWHERE ${1:column} ${2|<>,!=|} ${3|cond,'cond','\"cond\"|};"
        ],
        "description": "Condition WHERE avec inégalité"
    },
    "where_less_than": {
        "prefix": "where_lt",
        "body": [
            "\t\tWHERE ${1:column} < ${2|cond,'cond','\"cond\"|};"
        ],
        "description": "Condition WHERE avec inférieur à"
    },
    "where_greater_than": {
        "prefix": "where_gt",
        "body": [
            "\t\tWHERE ${1:column} > ${2|cond,'cond','\"cond\"|};"
        ],
        "description": "Condition WHERE avec supérieur à"
    },
    "where_less_equal": {
        "prefix": "where_le",
        "body": [
            "\t\tWHERE ${1:column} <= ${2|cond,'cond','\"cond\"|};"
        ],
        "description": "Condition WHERE avec inférieur ou égal"
    },
    "where_greater_equal": {
        "prefix": "where_ge",
        "body": [
            "\t\tWHERE ${1:column} >= ${2|cond,'cond','\"cond\"|};"
        ],
        "description": "Condition WHERE avec supérieur ou égal"
    },
    "where_in": {
        "prefix": "where_in",
        "body": [
            "\t\tWHERE ${1:column} IN (${2|'cond1', 'cond2', 'cond3'|});"
        ],
        "description": "Condition WHERE avec IN"
    },
    "where_is_null": {
        "prefix": "where_is_null",
        "body": [
            "\t\tWHERE ${1:column} IS NULL;"
        ],
        "description": "Condition WHERE avec IS NULL"
    },
    "where_is_not_null": {
        "prefix": "where_is_not_null",
        "body": [
            "\t\tWHERE ${1:column} IS NOT NULL;"
        ],
        "description": "Condition WHERE avec IS NOT NULL"
    },
    "where_between": {
        "prefix": "where_between",
        "body": [
            "\t\tWHERE ${1:column} BETWEEN ${2|cond1,'cond1','\"cond1\"|} AND ${3|cond2,'cond2','\"cond2\"|};"
        ],
        "description": "Condition WHERE avec BETWEEN"
    },
    "where_not_between": {
        "prefix": "where_not_between",
        "body": [
            "\t\tWHERE ${1:column} NOT BETWEEN ${2|cond1,'cond1','\"cond1\"|} AND ${3|cond2,'cond2','\"cond2\"|};"
        ],
        "description": "Condition WHERE avec NOT BETWEEN"
    },
    "where_like": {
        "prefix": "where_like",
        "body": [
            "\t\tWHERE ${1:column} LIKE ${2|'%cond%', '_cond_'|};"
        ],
        "description": "Condition WHERE avec LIKE"
    },
    "where_ilike": {
        "prefix": "where_ilike",
        "body": [
            "\t\tWHERE ${1:column} ILIKE ${2|'%cond%', '_cond_'|};"
        ],
        "description": "Condition WHERE avec ILIKE (insensible à la casse)"
    },
    "where_not_like": {
        "prefix": "where_not_like",
        "body": [
            "\t\tWHERE ${1:column} NOT LIKE ${2|'%cond%', '_cond_'|};"
        ],
        "description": "Condition WHERE avec NOT LIKE"
    },
    "where_not_ilike": {
        "prefix": "where_not_ilike",
        "body": [
            "\t\tWHERE ${1:column} NOT ILIKE ${2|'%cond%', '_cond_'|};"
        ],
        "description": "Condition WHERE avec NOT ILIKE (insensible à la casse)"
    },
    "where_and_or": {
        "prefix": "where_and_or",
        "body": [
            "\t\tWHERE (${1:cond1} OR ${2:cond2}) AND ${3:cond3};"
        ],
        "description": "Condition WHERE avec AND et OR"
    },
    "where_or_and": {
        "prefix": "where_or_and",
        "body": [
            "\t\tWHERE ${1:cond1} OR (${2:cond2} AND ${3:cond3});"
        ],
        "description": "Condition WHERE avec OR et AND imbriqués"
    },
    "printwhere": {
        "prefix": "printwhere",
        "body": [
            "-- Snippets des clauses WHERE :",
            "-- where_equal: Condition d'égalité",
            "-- where_not_equal: Condition de non-égalité (<>, !=)",
            "-- where_less_than: Condition inférieur à",
            "-- where_greater_than: Condition supérieur à",
            "-- where_less_equal: Condition inférieur ou égal",
            "-- where_greater_equal: Condition supérieur ou égal",
            "-- where_in: Condition IN",
            "-- where_is_null: Condition IS NULL",
            "-- where_is_not_null: Condition IS NOT NULL",
            "-- where_between: Condition BETWEEN",
            "-- where_not_between: Condition NOT BETWEEN",
            "-- where_like: Condition LIKE avec % et _",
            "-- where_ilike: Condition ILIKE (insensible à la casse)",
            "-- where_not_like: Condition NOT LIKE",
            "-- where_not_ilike: Condition NOT ILIKE (insensible à la casse)",
            "-- where_and_or: Condition AND avec OR imbriqués",
            "-- where_or_and: Condition OR avec AND imbriqués"
        ],
        "description": "Aide-mémoire des clauses WHERE"
    },
    "alias": {
    "prefix": "alias",
    "body": ["${1:column_name} AS \"${2:alias_name}\""],
    "description": "Renommer une colonne avec AS"
    },
    "concat": {
    "prefix": "concat",
    "body": ["CONCAT(${1:expr1}, ${2:expr2})"],
    "description": "Concaténer des chaînes de caractères"
    },
    "concat_pipe": {
    "prefix": "concat_pipe",
    "body": ["${1:column1} || ' ' || ${2:column2}"],
    "description": "Concaténation avec les opérateurs pipes `||`"
    },
    "coalesce": {
    "prefix": "coalesce",
    "body": ["COALESCE(${1:column}, ${2:'default_value'})"],
    "description": "Remplacer les valeurs nulles avec COALESCE"
    },
    "case_simple": {
    "prefix": "case_simple",
    "body": [
        "CASE ${1:column}",
        "\tWHEN '${2:value1}' THEN '${3:result1}'",
        "\tWHEN '${4:value2}' THEN '${5:result2}'",
        "\tELSE '${6:default}'",
        "END AS \"${7:alias}\""
    ],
    "description": "Utiliser CASE pour transformer des valeurs"
    },
    "case_title": {
    "prefix": "case_title",
    "body": [
        "CASE ${1:titre}",
        "\tWHEN 'M' THEN 'Monsieur'",
        "\tWHEN 'MME' THEN 'Madame'",
        "\tWHEN 'MLLE' THEN 'Mademoiselle'",
        "\tELSE ''",
        "END"
    ],
    "description": "Transformation des civilités avec CASE"
    },
    "printmiseenpage": {
    "prefix": "printmiseenpage",
    "body": [
        "-- Snippets de mise en page SQL :",
        "-- alias: Renommer une colonne avec AS",
        "-- concat: Concaténer des colonnes avec CONCAT()",
        "-- concat_pipe: Concaténer des colonnes avec ||",
        "-- coalesce: Remplacer les valeurs nulles avec COALESCE",
        "-- case_simple: Utiliser CASE pour transformer des valeurs",
        "-- case_title: Transformation des civilités avec CASE"
    ],
    "description": "Aide-mémoire pour les snippets de mise en page SQL"
    },
    "to_char_dd_mm_yyyy": {
    "prefix": "to_char_dd_mm_yyyy",
    "body": ["TO_CHAR(${1:date}, 'DD/MM/YYYY')"],
    "description": "Convertir la date au format DD/MM/YYYY"
    },
    "to_char_dd_mm_yy": {
    "prefix": "to_char_dd_mm_yy",
    "body": ["TO_CHAR(${1:date}, 'DD/MM/YY')"],
    "description": "Convertir la date au format DD/MM/YY"
    },
    "to_char_dd_mm_dash_yyyy": {
    "prefix": "to_char_dd_mm_dash_yyyy",
    "body": ["TO_CHAR(${1:date}, 'DD-MM-YYYY')"],
    "description": "Convertir la date au format DD-MM-YYYY"
    },
    "to_char_day_dd_month_yyyy": {
    "prefix": "to_char_day_dd_month_yyyy",
    "body": ["TO_CHAR(${1:date}, 'FMDay DD FMMonth YYYY')"],
    "description": "Convertir la date au format complet (ex: Jeudi 12 Janvier 1963)"
    },
    "to_char_yyyy_mm_dd": {
    "prefix": "to_char_yyyy_mm_dd",
    "body": ["TO_CHAR(${1:date}, 'YYYY-MM-DD')"],
    "description": "Convertir la date au format ISO (YYYY-MM-DD)"
    },
    "to_date_dd_mm_yyyy_dash": {
    "prefix": "to_date_dd_mm_yyyy_dash",
    "body": ["TO_DATE(${1:'12-01-1963'}, 'DD-MM-YYYY')"],
    "description": "Conversion d'une chaîne '12-01-1963' en date"
    },
    "to_date_dd_mm_yy_dash": {
    "prefix": "to_date_dd_mm_yy_dash",
    "body": ["TO_DATE(${1:'12-01-63'}, 'DD-MM-YY')"],
    "description": "Conversion d'une chaîne '12-01-63' en date"
    },
    "to_date_dd_mm_yyyy_slash": {
    "prefix": "to_date_dd_mm_yyyy_slash",
    "body": ["TO_DATE(${1:'12/01/1963'}, 'DD/MM/YYYY')"],
    "description": "Conversion d'une chaîne '12/01/1963' en date"
    },
    "to_date_dd_mm_yy_slash": {
    "prefix": "to_date_dd_mm_yy_slash",
    "body": ["TO_DATE(${1:'12/01/63'}, 'DD/MM/YY')"],
    "description": "Conversion d'une chaîne '12/01/63' en date"
    },
    "to_date_yyyy_mm_dd_dash": {
    "prefix": "to_date_yyyy_mm_dd_dash",
    "body": ["TO_DATE(${1:'1963-01-12'}, 'YYYY-MM-DD')"],
    "description": "Conversion d'une chaîne '1963-01-12' en date"
    },
    "to_date_yyyymmdd": {
    "prefix": "to_date_yyyymmdd",
    "body": ["TO_DATE(${1:'19630112'}, 'YYYYMMDD')"],
    "description": "Conversion d'une chaîne '19630112' en date"
    },
    "to_char_hh": {
        "prefix": "to_char_hh",
        "body": ["TO_CHAR(${1:date}, 'HH24')"],
        "description": "Convertir l'heure au format HH (ex: 23)"
    },
    "to_char_hh_mm": {
        "prefix": "to_char_hh_mm",
        "body": ["TO_CHAR(${1:date}, 'HH24:MI')"],
        "description": "Convertir l'heure au format HH:MM (ex: 23:54)"
    },
    "to_char_hh_mm_ss": {
        "prefix": "to_char_hh_mm_ss",
        "body": ["TO_CHAR(${1:date}, 'HH24:MI:SS')"],
        "description": "Convertir l'heure au format HH:MM:SS (ex: 23:54:48)"
    },
    "to_char_heure": {
        "prefix": "to_char_heure",
        "body": ["TO_CHAR(${1:date}, 'HH24 heures')"],
        "description": "Convertir l'heure au format 23 heures"
    },
    "to_char_heure_minute": {
        "prefix": "to_char_heure_minute",
        "body": ["TO_CHAR(${1:date}, 'HH24 heures MI minutes')"],
        "description": "Convertir l'heure au format 23 heures 54 minutes"
    },
    "to_char_heure_minute_seconde": {
        "prefix": "to_char_heure_minute_seconde",
        "body": ["TO_CHAR(${1:date}, 'HH24 heures MI minutes SS secondes')"],
        "description": "Convertir l'heure au format 23 heures 54 minutes 48 secondes"
    },
    "to_char_hh_min": {
        "prefix": "to_char_hh_min",
        "body": ["TO_CHAR(${1:date}, 'HH24h MI')"],
        "description": "Convertir l'heure au format 23 h 54"
    },
    "to_char_day_dd_month_yyyy_hh": {
        "prefix": "to_char_day_dd_month_yyyy_hh",
        "body": ["TO_CHAR(${1:date}, 'FMDay DD FMMonth YYYY à HH24')"],
        "description": "Convertir la date et l'heure au format complet (ex: Jeudi 12 Janvier 1963 à 23)"
    },
    "to_char_day_dd_month_yyyy_hh_mm": {
        "prefix": "to_char_day_dd_month_yyyy_hh_mm",
        "body": ["TO_CHAR(${1:date}, 'FMDay DD FMMonth YYYY à HH24:MI')"],
        "description": "Convertir la date et l'heure au format complet (ex: Jeudi 12 Janvier 1963 à 23:54)"
    },
    "to_char_day_dd_month_yyyy_hh_mm_ss": {
        "prefix": "to_char_day_dd_month_yyyy_hh_mm_ss",
        "body": ["TO_CHAR(${1:date}, 'FMDay DD FMMonth YYYY à HH24:MI:SS')"],
        "description": "Convertir la date et l'heure au format complet (ex: Jeudi 12 Janvier 1963 à 23:54:48)"
    },
    "to_char_day_dd_month_yyyy_heure": {
        "prefix": "to_char_day_dd_month_yyyy_heure",
        "body": ["TO_CHAR(${1:date}, 'FMDay DD FMMonth YYYY à HH24 heures')"],
        "description": "Convertir la date et l'heure au format complet (ex: Jeudi 12 Janvier 1963 à 23 heures)"
    },
    "to_char_day_dd_month_yyyy_heure_minute": {
        "prefix": "to_char_day_dd_month_yyyy_heure_minute",
        "body": ["TO_CHAR(${1:date}, 'FMDay DD FMMonth YYYY à HH24 heures MI minutes')"],
        "description": "Convertir la date et l'heure au format complet (ex: Jeudi 12 Janvier 1963 à 23 heures 54 minutes)"
    },
    "to_char_day_dd_month_yyyy_heure_minute_seconde": {
        "prefix": "to_char_day_dd_month_yyyy_heure_minute_seconde",
        "body": ["TO_CHAR(${1:date}, 'FMDay DD FMMonth YYYY à HH24 heures MI minutes SS secondes')"],
        "description": "Convertir la date et l'heure au format complet (ex: Jeudi 12 Janvier 1963 à 23 heures 54 minutes 48 secondes)"
    },
    "to_char_day_dd_month_yyyy_hh_min": {
        "prefix": "to_char_day_dd_month_yyyy_hh_min",
        "body": ["TO_CHAR(${1:date}, 'FMDay DD FMMonth YYYY à HH24h MI')"],
        "description": "Convertir la date et l'heure au format complet (ex: Jeudi 12 Janvier 1963 à 23 h 54)"
    },
    "printdate": {
        "prefix": "printdate",
        "body": [
            "-- Snippets de gestion des dates et heures :",
            "-- to_char_dd_mm_yyyy: Convertir au format DD/MM/YYYY",
            "-- to_char_dd_mm_yy: Convertir au format DD/MM/YY",
            "-- to_char_dd_mm_dash_yyyy: Convertir au format DD-MM-YYYY",
            "-- to_char_day_dd_month_yyyy: Convertir au format Jeudi 12 Janvier 1963",
            "-- to_char_dd_month_yyyy: Convertir au format 12 Janvier 1963",
            "-- to_char_yyyy_mm_dd: Convertir au format YYYY-MM-DD",
            "-- to_char_hh: Convertir au format HH",
            "-- to_char_hh_mm: Convertir au format HH:MM",
            "-- to_char_hh_mm_ss: Convertir au format HH:MM:SS",
            "-- to_char_heure: Convertir au format 23 heures",
            "-- to_char_heure_minute: Convertir au format 23 heures 54 minutes",
            "-- to_char_heure_minute_seconde: Convertir au format 23 heures 54 minutes 48 secondes",
            "-- to_char_hh_min: Convertir au format 23 h 54",
            "-- to_char_day_dd_month_yyyy_hh: Convertir au format complet avec heure",
            "-- to_char_day_dd_month_yyyy_hh_mm: Convertir au format complet avec heure et minute",
            "-- to_char_day_dd_month_yyyy_hh_mm_ss: Convertir au format complet avec heure, minute et seconde",
            "-- to_char_day_dd_month_yyyy_heure: Convertir au format complet avec heure en texte",
            "-- to_char_day_dd_month_yyyy_heure_minute: Convertir au format complet avec heure et minute en texte",
            "-- to_char_day_dd_month_yyyy_heure_minute_seconde: Convertir au format complet avec heure, minute et seconde en texte",
            "-- to_char_day_dd_month_yyyy_hh_min: Convertir au format complet avec heure et minute abrégés",
            "-- to_date_dd_mm_yyyy_dash: Conversion '12-01-1963' en date",
            "-- to_date_dd_mm_yy_dash: Conversion '12-01-63' en date",
            "-- to_date_dd_mm_yyyy_slash: Conversion '12/01/1963' en date",
            "-- to_date_dd_mm_yy_slash: Conversion '12/01/63' en date",
            "-- to_date_yyyy_mm_dd_dash: Conversion '1963-01-12' en date",
            "-- to_date_yyyymmdd: Conversion '19630112' en date"
        ],
        "description": "Aide-mémoire pour les snippets de gestion des dates et heures"
    },
    "join": {
        "prefix": "join",
        "body": [
            "SELECT *",
            "\tFROM ${1:tab1_name} ${2:alias1}",
            "\t\tJOIN ${3:tab2_name} ${4:alias2} ON ${2:alias1}.${5:cle} = ${4:alias2}.${6:cle}",
            "\t\t\t;"
        ],
        "description": "Snippet pour une jointure INNER JOIN"
    },
    "join2": {
        "prefix": "join2",
        "body": [
            "SELECT ${1:col}, ${2:col2}",
            "\tFROM ${3:tableA} A, ${4:tableB} B",
            "\t\tWHERE A.${5:cle} = B.${6:cle}",
            "\t\t\t;"
        ],
        "description": "Snippet pour un SELECT multi-table avec jointure implicite"
    },
    "join_no_match": {
        "prefix": "join_no_match",
        "body": [
            "SELECT *",
            "\tFROM ${1:tab1_name} ${2:alias1}",
            "\t\tLEFT JOIN ${3:tab2_name} ${4:alias2} ON ${2:alias1}.${5:cle} = ${4:alias2}.${6:cle}",
            "\t\t\tWHERE ${4:alias2}.${5:cle} IS NULL",
            "\t\t\t\t;"
        ],
        "description": "LEFT JOIN avec condition de non-correspondance"
    },
    "ljoin": {
        "prefix": "ljoin",
        "body": [
            "SELECT *",
            "\tFROM ${1:tab1_name} ${2:alias1}",
            "\t\tLEFT JOIN ${3:tab2_name} ${4:alias2} ON ${2:alias1}.${5:cle} = ${4:alias2}.${6:cle}",
            "\t\t\t;"
        ],
        "description": "Snippet pour une jointure LEFT JOIN"
    },
    "rjoin_no_match": {
        "prefix": "rjoin_no_match",
        "body": [
            "SELECT *",
            "\tFROM ${1:tab1_name} ${2:alias1}",
            "\t\tRIGHT JOIN ${3:tab2_name} ${4:alias2} ON ${2:alias1}.${5:cle} = ${4:alias2}.${6:cle}",
            "\t\t\tWHERE ${2:alias1}.${5:cle} IS NULL",
            "\t\t\t\t;"
        ],
        "description": "RIGHT JOIN avec condition de non-correspondance"
    },
    "rjoin": {
        "prefix": "rjoin",
        "body": [
            "SELECT *",
            "\tFROM ${1:tab1_name} ${2:alias1}",
            "\t\tRIGHT JOIN ${3:tab2_name} ${4:alias2} ON ${2:alias1}.${5:cle} = ${4:alias2}.${6:cle}",
            "\t\t\t;"
        ],
        "description": "Snippet pour une jointure RIGHT JOIN"
    },
    "full_outer_join": {
        "prefix": "full_outer_join",
        "body": [
            "SELECT ${1:col}",
            "\tFROM ${2:tableA} ${3:aliasA}",
            "\t\tFULL OUTER JOIN ${4:tableB} ${5:aliasB} ON ${3:aliasA}.${6:key} = ${5:aliasB}.${6:key}",
            "\t\t\t;"
        ],
        "description": "Snippet pour FULL OUTER JOIN sans exclusion"
    },
    "fout": {
        "prefix": "fout",
        "body": [
            "SELECT ${1:col}",
            "FROM ${2:tab1_name} ${3:alias1}",
            "\tFULL OUTER JOIN ${4:table2_name} ${5:alias2} ON ${3:alias1}.${6:cle} = ${5:alias2}.${7:cle}",
            "WHERE ${3:alias1}.${8:cle} IS NULL OR ${5:alias2}.${9:cle} IS NULL;"
        ],
        "description": "Snippet for FULL OUTER JOIN"
    },
    "fjoin": {
    "prefix": "fjoin",
    "body": [
        "JOIN ${1:tab2_name} ${2:alias2} ON ${3:alias1}.${4:cle} = ${2:alias2}.${5:cle}"
    ],
    "description": "Snippet pour INNER JOIN avec extension"
    },
    "join_more": {
    "prefix": "join_more",
    "body": [
        "JOIN ${1:tab3_name} ${2:alias3} ON ${3:alias2}.${4:cle} = ${2:alias3}.${5:cle}"
    ],
    "description": "Ajouter une autre jointure INNER JOIN"
    },
    "fljoin": {
    "prefix": "fljoin",
    "body": [
        "LEFT JOIN ${1:tab2_name} ${2:alias2} ON ${3:alias1}.${4:cle} = ${2:alias2}.${5:cle}"
    ],
    "description": "Snippet pour LEFT JOIN avec extension"
    },
    "ljoin_more": {
    "prefix": "ljoin_more",
    "body": [
        "LEFT JOIN ${1:tab3_name} ${2:alias3} ON ${3:alias2}.${4:cle} = ${2:alias3}.${5:cle}"
    ],
    "description": "Ajouter une autre jointure LEFT JOIN"
    },
    "frjoin": {
    "prefix": "frjoin",
    "body": [
        "RIGHT JOIN ${1:tab2_name} ${2:alias2} ON ${3:alias1}.${4:cle} = ${2:alias2}.${5:cle}"
    ],
    "description": "Snippet pour RIGHT JOIN avec extension"
    },
    "rjoin_more": {
    "prefix": "rjoin_more",
    "body": [
        "RIGHT JOIN ${1:tab3_name} ${2:alias3} ON ${3:alias2}.${4:cle} = ${2:alias3}.${5:cle}"
    ],
    "description": "Ajouter une autre jointure RIGHT JOIN"
    },
    "union": {
        "prefix": "union",
        "body": [
            "${1:query1}",
            "",
            "\t\t\tUNION",
            "",
            "${2:query2}"
        ],
        "description": "Snippet pour UNION sans ALL"
    },
    "union_all": {
        "prefix": "union_all",
        "body": [
            "${1:query1}",
            "",
            "\t\t\tUNION ALL",
            "",
            "${2:query2}"
        ],
        "description": "Snippet pour UNION avec ALL"
    },
    "intersect": {
        "prefix": "intersect",
        "body": [
            "${1:query1}",
            "",
            "\t\t\tINTERSECT",
            "",
            "${2:query2}"
        ],
        "description": "Snippet pour INTERSECT sans ALL"
    },
    "intersect_all": {
        "prefix": "intersect_all",
        "body": [
            "${1:query1}",
            "",
            "\t\t\tINTERSECT ALL",
            "",
            "${2:query2}"
        ],
        "description": "Snippet pour INTERSECT avec ALL"
    },
    "except": {
        "prefix": "except",
        "body": [
            "${1:query1}",
            "",
            "\t\t\tEXCEPT",
            "",
            "${2:query2}"
        ],
        "description": "Snippet pour EXCEPT sans ALL"
    },
    "except_all": {
        "prefix": "except_all",
        "body": [
            "${1:query1}",
            "",
            "\t\t\tEXCEPT ALL",
            "",
            "${2:query2}"
        ],
        "description": "Snippet pour EXCEPT avec ALL"
    },
    "printjoin": {
        "prefix": "printjoin",
        "body": [
            "-- Snippets de jointures :",
            "-- join: INNER JOIN",
            "-- join2: INNER JOIN avec une clause WHERE",
            "-- join_no_match: LEFT JOIN avec non-correspondance",
            "-- fjoin: INNER JOIN avec extension",
            "-- join_more: Ajouter une autre jointure INNER JOIN",
            "-- ljoin: LEFT JOIN",
            "-- fljoin: LEFT JOIN avec extension",
            "-- ljoin_more: Ajouter une autre jointure LEFT JOIN",
            "-- rjoin_no_match: RIGHT JOIN avec non-correspondance",
            "-- rjoin: RIGHT JOIN",
            "-- frjoin: RIGHT JOIN avec extension",
            "-- rjoin_more: Ajouter une autre jointure RIGHT JOIN",
            "-- full_outer_join: FULL OUTER JOIN sans exclusion",
            "-- fout: FULL OUTER JOIN",
            "-- union: UNION sans ALL",
            "-- union_all: UNION avec ALL",
            "-- intersect: INTERSECT sans ALL",
            "-- intersect_all: INTERSECT avec ALL",
            "-- except: EXCEPT sans ALL",
            "-- except_all: EXCEPT avec ALL"
        ],
        "description": "Aide-mémoire pour les snippets de jointures et opérations d'ensembles"
    },
    "avg": {
        "prefix": "avg",
        "body": ["AVG(${1:column})"],
        "description": "Calculates the average of a column"
    },
    "count": {
        "prefix": "count",
        "body": ["COUNT(${1:column})"],
        "description": "Counts the number of non-null values in a column"
    },
    "count_star": {
        "prefix": "count_star",
        "body": ["COUNT(*)"],
        "description": "Counts all rows, including nulls"
    },
    "count_expr": {
        "prefix": "count_expr",
        "body": ["COUNT(${1:expression})"],
        "description": "Counts the result of an expression"
    },
    "max": {
        "prefix": "max",
        "body": ["MAX(${1:column})"],
        "description": "Finds the maximum value in a column"
    },
    "min": {
        "prefix": "min",
        "body": ["MIN(${1:column})"],
        "description": "Finds the minimum value in a column"
    },
    "sum": {
        "prefix": "sum",
        "body": ["SUM(${1:column})"],
        "description": "Calculates the sum of a column"
    },
    "group_concat": {
        "prefix": "group_concat",
        "body": ["GROUP_CONCAT(${1:column})"],
        "description": "Concatenates the values of a column"
    },
    "stddev": {
        "prefix": "stddev",
        "body": ["STDDEV(${1:column})"],
        "description": "Calculates the standard deviation of a column"
    },
    "variance": {
        "prefix": "variance",
        "body": ["VARIANCE(${1:column})"],
        "description": "Calculates the variance of a column"
    },
    "median": {
        "prefix": "median",
        "body": ["MEDIAN(${1:column})"],
        "description": "Calculates the median value of a column"
    },
    "grouping": {
        "prefix": "grouping",
        "body": ["GROUPING(${1:column})"],
        "description": "Indicates whether a column is aggregated or not"
    },
    "percentile_cont": {
        "prefix": "percentile_cont",
        "body": [
            "PERCENTILE_CONT(${1:percentile})",
            "WITHIN GROUP (ORDER BY ${2:column})"
        ],
        "description": "Calculates a percentile using continuous distribution"
    },
    "percentile_disc": {
        "prefix": "percentile_disc",
        "body": [
            "PERCENTILE_DISC(${1:percentile})",
            "WITHIN GROUP (ORDER BY ${2:column})"
        ],
        "description": "Calculates a percentile using discrete distribution"
    },
    "corr": {
        "prefix": "corr",
        "body": ["CORR(${1:column_x}, ${2:column_y})"],
        "description": "Calculates the correlation between two columns"
    },
    "covar_pop": {
        "prefix": "covar_pop",
        "body": ["COVAR_POP(${1:column_x}, ${2:column_y})"],
        "description": "Calculates the population covariance of two columns"
    },
    "covar_samp": {
        "prefix": "covar_samp",
        "body": ["COVAR_SAMP(${1:column_x}, ${2:column_y})"],
        "description": "Calculates the sample covariance of two columns"
    },
    "mode": {
        "prefix": "mode",
        "body": ["MODE() WITHIN GROUP (ORDER BY ${1:column})"],
        "description": "Calculates the mode (most frequent value)"
    },
    "printgroup": {
        "prefix": "printgroup",
        "body": [
            "-- Snippets for Group Functions:",
            "-- avg: Calculates the average",
            "-- count: Counts the non-null values",
            "-- count_star: Counts all rows",
            "-- count_expr: Counts the result of an expression",
            "-- max: Finds the maximum value",
            "-- min: Finds the minimum value",
            "-- sum: Calculates the sum",
            "-- group_concat: Concatenates values",
            "-- stddev: Calculates the standard deviation",
            "-- variance: Calculates the variance",
            "-- median: Calculates the median",
            "-- grouping: Indicates aggregation in GROUP BY",
            "-- percentile_cont: Continuous percentile calculation",
            "-- percentile_disc: Discrete percentile calculation",
            "-- corr: Correlation between two columns",
            "-- covar_pop: Population covariance",
            "-- covar_samp: Sample covariance",
            "-- mode: Mode within group"
        ],
        "description": "Aide-mémoire for SQL group functions"
    },
    "having_eq": {
        "prefix": "having_eq",
        "body": ["HAVING ${1:agg_func}(${2:column}) = ${3:value}"],
        "description": "Clause HAVING avec condition d'égalité"
    },
    "having_gt": {
        "prefix": "having_gt",
        "body": ["HAVING ${1:agg_func}(${2:column}) > ${3:value}"],
        "description": "Clause HAVING avec condition de supériorité"
    },
    "having_lt": {
        "prefix": "having_lt",
        "body": ["HAVING ${1:agg_func}(${2:column}) < ${3:value}"],
        "description": "Clause HAVING avec condition d'infériorité"
    },
    "having_gte": {
        "prefix": "having_gte",
        "body": ["HAVING ${1:agg_func}(${2:column}) >= ${3:value}"],
        "description": "Clause HAVING avec condition de supériorité ou égalité"
    },
    "having_lte": {
        "prefix": "having_lte",
        "body": ["HAVING ${1:agg_func}(${2:column}) <= ${3:value}"],
        "description": "Clause HAVING avec condition d'infériorité ou égalité"
    },
    "having_not_equal": {
        "prefix": "having_not_equal",
        "body": ["HAVING ${1:agg_func}(${2:column}) <> ${3:value}"],
        "description": "Clause HAVING avec condition de non-égalité"
    },
    "having_like": {
        "prefix": "having_like",
        "body": ["HAVING ${1:agg_func}(${2:column}) LIKE ${3:'%value%'}"],
        "description": "Clause HAVING avec LIKE"
    },
    "having_not_like": {
        "prefix": "having_not_like",
        "body": ["HAVING ${1:agg_func}(${2:column}) NOT LIKE ${3:'%value%'}"],
        "description": "Clause HAVING avec NOT LIKE"
    },
    "having_ilike": {
        "prefix": "having_ilike",
        "body": ["HAVING ${1:agg_func}(${2:column}) ILIKE ${3:'%value%'}"],
        "description": "Clause HAVING avec ILIKE (insensible à la casse)"
    },
    "having_not_ilike": {
        "prefix": "having_not_ilike",
        "body": ["HAVING ${1:agg_func}(${2:column}) NOT ILIKE ${3:'%value%'}"],
        "description": "Clause HAVING avec NOT ILIKE (insensible à la casse)"
    },
    "having_and_or": {
        "prefix": "having_and_or",
        "body": [
            "HAVING (${1:agg_func}(${2:column}) ${3:operator} ${4:value})",
            "\tAND (${5:agg_func2}(${6:column2}) ${7:operator2} ${8:value2})"
        ],
        "description": "Clause HAVING avec conditions AND et OR"
    },
    "having_between": {
        "prefix": "having_between",
        "body": [
            "HAVING ${1:agg_func}(${2:column}) BETWEEN ${3:value1} AND ${4:value2}"
        ],
        "description": "Clause HAVING avec BETWEEN"
    },
    "having_not_between": {
        "prefix": "having_not_between",
        "body": [
            "HAVING ${1:agg_func}(${2:column}) NOT BETWEEN ${3:value1} AND ${4:value2}"
        ],
        "description": "Clause HAVING avec NOT BETWEEN"
    },
    "having_in": {
        "prefix": "having_in",
        "body": [
            "HAVING ${1:agg_func}(${2:column}) IN (${3:value1}, ${4:value2}, ${5:value3})"
        ],
        "description": "Clause HAVING avec IN"
    },
    "having_not_in": {
        "prefix": "having_not_in",
        "body": [
            "HAVING ${1:agg_func}(${2:column}) NOT IN (${3:value1}, ${4:value2}, ${5:value3})"
        ],
        "description": "Clause HAVING avec NOT IN"
    },
    "having_is_null": {
        "prefix": "having_is_null",
        "body": [
            "HAVING ${1:agg_func}(${2:column}) IS NULL"
        ],
        "description": "Clause HAVING avec IS NULL"
    },
    "having_is_not_null": {
        "prefix": "having_is_not_null",
        "body": [
            "HAVING ${1:agg_func}(${2:column}) IS NOT NULL"
        ],
        "description": "Clause HAVING avec IS NOT NULL"
    },
    "printhaving": {
        "prefix": "printhaving",
        "body": [
            "-- Snippets pour les clauses HAVING :",
            "-- having_eq: Clause HAVING avec condition d'égalité",
            "-- having_gt: Clause HAVING avec condition de supériorité",
            "-- having_lt: Clause HAVING avec condition d'infériorité",
            "-- having_gte: Clause HAVING avec condition de supériorité ou égalité",
            "-- having_lte: Clause HAVING avec condition d'infériorité ou égalité",
            "-- having_not_equal: Clause HAVING avec condition de non-égalité",
            "-- having_like: Clause HAVING avec LIKE",
            "-- having_not_like: Clause HAVING avec NOT LIKE",
            "-- having_ilike: Clause HAVING avec ILIKE (insensible à la casse)",
            "-- having_not_ilike: Clause HAVING avec NOT ILIKE (insensible à la casse)",
            "-- having_and_or: Clause HAVING avec conditions AND et OR",
            "-- having_between: Clause HAVING avec BETWEEN",
            "-- having_not_between: Clause HAVING avec NOT BETWEEN",
            "-- having_in: Clause HAVING avec IN",
            "-- having_not_in: Clause HAVING avec NOT IN",
            "-- having_is_null: Clause HAVING avec IS NULL",
            "-- having_is_not_null: Clause HAVING avec IS NOT NULL"
        ],
        "description": "Aide-mémoire pour les clauses HAVING"
    },
    "max_filter": {
        "prefix": "max_filter",
        "body": [
            "SELECT ${1:columns}",
            "FROM ${2:table}",
            "\tWHERE ${3:column} = (SELECT MAX(${3:column}) FROM ${2:table});"
        ],
        "description": "Filtrer pour la valeur maximale d'une colonne spécifique"
    },
    "top_n": {
        "prefix": "top_n",
        "body": [
            "SELECT ${1:columns}",
            "FROM ${2:table}",
            "\tORDER BY ${3:column} DESC",
            "\t\tLIMIT ${4:N};"
        ],
        "description": "Obtenir les N meilleurs résultats (Top N)"
    },
    "most_recent": {
        "prefix": "most_recent",
        "body": [
            "SELECT ${1:columns}",
            "FROM ${2:table}",
            "\tWHERE ${3:date_column} = (SELECT MAX(${3:date_column}) FROM ${2:table});"
        ],
        "description": "Filtrer selon la valeur la plus récente d'une colonne de date"
    },
    "last_inserted": {
        "prefix": "last_inserted",
        "body": [
            "SELECT ${1:columns}",
            "FROM ${2:table}",
            "\tORDER BY ${3:date_column} DESC",
            "\t\tLIMIT 1;"
        ],
        "description": "Obtenir le dernier enregistrement ajouté dans une table"
    },
    "avg_by_group": {
        "prefix": "avg_by_group",
        "body": [
            "SELECT ${1:group_column}, AVG(${2:value_column}) AS moyenne",
            "FROM ${3:table}",
            "\tGROUP BY ${1:group_column}",
            "\t\tHAVING AVG(${2:value_column}) > ${4:value};"
        ],
        "description": "Calcul de la moyenne par groupe avec un filtre"
    },
    "exists_condition": {
        "prefix": "exists_condition",
        "body": [
            "SELECT ${1:columns}",
            "FROM ${2:table}",
            "\tWHERE EXISTS (",
            "\t\tSELECT 1",
            "\t\tFROM ${3:related_table}",
            "\t\t\tWHERE ${4:condition}",
            "\t\t);"
        ],
        "description": "Filtrer en utilisant une condition d'existence"
    },
    "distinct_filter": {
        "prefix": "distinct_filter",
        "body": [
            "SELECT DISTINCT ${1:columns}",
            "FROM ${2:table}",
            "\tWHERE ${3:condition};"
        ],
        "description": "Filtrer pour obtenir des lignes distinctes"
    },
    "count_and_max": {
        "prefix": "count_and_max",
        "body": [
            "SELECT ${1:group_column}, COUNT(${2:count_column}) AS nb_occurrences",
            "FROM ${3:table}",
            "\tGROUP BY ${1:group_column}",
            "\t\tHAVING COUNT(${2:count_column}) = (",
            "\t\t\tSELECT MAX(count) FROM (",
            "\t\t\t\tSELECT COUNT(${2:count_column}) AS count",
            "\t\t\t\tFROM ${3:table}",
            "\t\t\t\t\tGROUP BY ${1:group_column}",
            "\t\t\t) AS subquery",
            "\t\t);"
        ],
        "description": "Compter les occurrences et filtrer sur le maximum"
    },
    "printcond": {
        "prefix": "printcond",
        "body": [
            "-- Snippets pour les conditions avancées :",
            "-- max_filter: Filtrer pour la valeur maximale d'une colonne spécifique",
            "-- top_n: Obtenir les N meilleurs résultats (Top N)",
            "-- most_recent: Filtrer selon la valeur la plus récente d'une colonne de date",
            "-- last_inserted: Obtenir le dernier enregistrement ajouté dans une table",
            "-- avg_by_group: Calcul de la moyenne par groupe avec un filtre",
            "-- exists_condition: Filtrer en utilisant une condition d'existence",
            "-- distinct_filter: Filtrer pour obtenir des lignes distinctes",
            "-- count_and_max: Compter les occurrences et filtrer sur le maximum"
        ],
        "description": "Aide-mémoire pour les conditions avancées en SQL"
    },
    "drop_table_if_exists": {
        "prefix": "drop_table_if_exists",
        "body": [
            "DROP TABLE IF EXISTS ${1:table_name};"
        ],
        "description": "Supprimer une table si elle existe (sans CASCADE). Peut échouer si des dépendances existent."
    },
    "drop_table_if_exists_cascade": {
        "prefix": "drop_table_if_exists_cascade",
        "body": [
            "DROP TABLE IF EXISTS ${1:table_name} CASCADE;"
        ],
        "description": "Supprimer une table si elle existe avec CASCADE. Utiliser si la table a des dépendances (clés étrangères, etc.)."
    },
    "create_table_if_exists": {
        "prefix": "create_table_if_exists",
        "body": [
            "DROP TABLE IF EXISTS ${1:table_name};",
            "\tCREATE TABLE IF NOT EXISTS ${1:table_name} (",
            "\t\t${2:col_name} ${3:data_type}${4:, other_columns}",
            "\t\t\t);"
        ],
        "description": "Créer une table avec IF NOT EXISTS après avoir supprimé la table existante."
    },
    "drop_sequence_if_exists": {
        "prefix": "drop_sequence_if_exists",
        "body": [
            "DROP SEQUENCE IF EXISTS ${1:sequence_name};"
        ],
        "description": "Supprimer une séquence si elle existe (sans CASCADE). Peut échouer si des dépendances existent."
    },
    "drop_sequence_if_exists_cascade": {
        "prefix": "drop_sequence_if_exists_cascade",
        "body": [
            "DROP SEQUENCE IF EXISTS ${1:sequence_name} CASCADE;"
        ],
        "description": "Supprimer une séquence si elle existe avec CASCADE. Utiliser si la séquence a des dépendances."
    },
    "create_sequence_if_exists": {
        "prefix": "create_sequence_if_exists",
        "body": [
            "DROP SEQUENCE IF EXISTS ${1:sequence_name};",
            "\tCREATE SEQUENCE IF NOT EXISTS ${1:sequence_name};"
        ],
        "description": "Créer une séquence avec IF NOT EXISTS après avoir supprimé la séquence existante."
    },
    "create_table_with_sequence": {
        "prefix": "create_table_with_sequence",
        "body": [
            "DROP TABLE IF EXISTS ${1:table_name};",
            "\tCREATE TABLE IF NOT EXISTS ${1:table_name} (",
            "\t\ttable_id INTEGER DEFAULT NEXTVAL('${4:table_seq}'),",
            "\t\t\t${2:col_name} ${3:data_type},",
            "\t\t\t\t${5:other_columns}",
            "\t\t\t\t\t);"
        ],
        "description": "Créer une table avec une séquence pour la clé primaire après avoir supprimé la table existante."
    },
    "col_char": {
        "prefix": "col_char",
        "body": [
            "\t${1:col_name} CHAR(${2:n}),"
        ],
        "description": "Ajouter une colonne de type CHAR(n)."
    },
    "col_char_not_null": {
        "prefix": "col_char_not_null",
        "body": [
            "\t${1:col_name} CHAR(${2:n}) NOT NULL,"
        ],
        "description": "Ajouter une colonne de type CHAR(n) avec NOT NULL."
    },
    "col_varchar": {
        "prefix": "col_varchar",
        "body": [
            "\t${1:col_name} VARCHAR(${2:n}),"
        ],
        "description": "Ajouter une colonne de type VARCHAR(n)."
    },
    "col_varchar_not_null": {
        "prefix": "col_varchar_not_null",
        "body": [
            "\t${1:col_name} VARCHAR(${2:n}) NOT NULL,"
        ],
        "description": "Ajouter une colonne de type VARCHAR(n) avec NOT NULL."
    },
    "col_text": {
        "prefix": "col_text",
        "body": [
            "\t${1:col_name} TEXT,"
        ],
        "description": "Ajouter une colonne de type TEXT."
    },
    "col_text_not_null": {
        "prefix": "col_text_not_null",
        "body": [
            "\t${1:col_name} TEXT NOT NULL,"
        ],
        "description": "Ajouter une colonne de type TEXT avec NOT NULL."
    },
    "col_int": {
        "prefix": "col_int",
        "body": [
            "\t${1:col_name} INTEGER,"
        ],
        "description": "Ajouter une colonne de type INTEGER."
    },
    "col_int_not_null": {
        "prefix": "col_int_not_null",
        "body": [
            "\t${1:col_name} INTEGER NOT NULL,"
        ],
        "description": "Ajouter une colonne de type INTEGER avec NOT NULL."
    },
    "col_serial": {
        "prefix": "col_serial",
        "body": [
            "\t${1:col_name} SERIAL,"
        ],
        "description": "Ajouter une colonne de type SERIAL."
    },
    "col_serial_not_null": {
        "prefix": "col_serial_not_null",
        "body": [
            "\t${1:col_name} SERIAL NOT NULL,"
        ],
        "description": "Ajouter une colonne de type SERIAL avec NOT NULL."
    },
    "col_numeric": {
        "prefix": "col_numeric",
        "body": [
            "\t${1:col_name} NUMERIC(${2:precision}, ${3:scale}),"
        ],
        "description": "Ajouter une colonne de type NUMERIC avec précision et échelle."
    },
    "col_numeric_not_null": {
        "prefix": "col_numeric_not_null",
        "body": [
            "\t${1:col_name} NUMERIC(${2:precision}, ${3:scale}) NOT NULL,"
        ],
        "description": "Ajouter une colonne de type NUMERIC avec précision, échelle, et NOT NULL."
    },
    "col_date": {
        "prefix": "col_date",
        "body": [
            "\t${1:col_name} DATE,"
        ],
        "description": "Ajouter une colonne de type DATE."
    },
    "col_date_not_null": {
        "prefix": "col_date_not_null",
        "body": [
            "\t${1:col_name} DATE NOT NULL,"
        ],
        "description": "Ajouter une colonne de type DATE avec NOT NULL."
    },
    "col_timestamp": {
        "prefix": "col_timestamp",
        "body": [
            "\t${1:col_name} TIMESTAMP,"
        ],
        "description": "Ajouter une colonne de type TIMESTAMP."
    },
    "col_timestamp_not_null": {
        "prefix": "col_timestamp_not_null",
        "body": [
            "\t${1:col_name} TIMESTAMP NOT NULL,"
        ],
        "description": "Ajouter une colonne de type TIMESTAMP avec NOT NULL."
    },
    "col_time": {
        "prefix": "col_time",
        "body": [
            "\t${1:col_name} TIME,"
        ],
        "description": "Ajouter une colonne de type TIME."
    },
    "col_time_not_null": {
        "prefix": "col_time_not_null",
        "body": [
            "\t${1:col_name} TIME NOT NULL,"
        ],
        "description": "Ajouter une colonne de type TIME avec NOT NULL."
    },
    "col_interval": {
        "prefix": "col_interval",
        "body": [
            "\t${1:col_name} INTERVAL,"
        ],
        "description": "Ajouter une colonne de type INTERVAL."
    },
    "col_interval_not_null": {
        "prefix": "col_interval_not_null",
        "body": [
            "\t${1:col_name} INTERVAL NOT NULL,"
        ],
        "description": "Ajouter une colonne de type INTERVAL avec NOT NULL."
    },
    "print_create": {
        "prefix": "print_create",
        "body": [
            "-- Snippets pour les opérations CREATE et ajout de colonnes :",
            "-- drop_table_if_exists: Supprimer une table si elle existe (sans CASCADE)",
            "-- drop_table_if_exists_cascade: Supprimer une table si elle existe avec CASCADE",
            "-- create_table_if_exists: Créer une table avec IF NOT EXISTS après suppression",
            "-- drop_sequence_if_exists: Supprimer une séquence si elle existe (sans CASCADE)",
            "-- drop_sequence_if_exists_cascade: Supprimer une séquence si elle existe avec CASCADE",
            "-- create_sequence_if_exists: Créer une séquence avec IF NOT EXISTS après suppression",
            "-- create_table_with_sequence: Créer une table avec une séquence pour la clé primaire",
            "-- col_char: Ajouter une colonne de type CHAR(n)",
            "-- col_char_not_null: Ajouter une colonne de type CHAR(n) avec NOT NULL",
            "-- col_varchar: Ajouter une colonne de type VARCHAR(n)",
            "-- col_varchar_not_null: Ajouter une colonne de type VARCHAR(n) avec NOT NULL",
            "-- col_text: Ajouter une colonne de type TEXT",
            "-- col_text_not_null: Ajouter une colonne de type TEXT avec NOT NULL",
            "-- col_int: Ajouter une colonne de type INTEGER",
            "-- col_int_not_null: Ajouter une colonne de type INTEGER avec NOT NULL",
            "-- col_serial: Ajouter une colonne de type SERIAL",
            "-- col_serial_not_null: Ajouter une colonne de type SERIAL avec NOT NULL",
            "-- col_numeric: Ajouter une colonne de type NUMERIC",
            "-- col_numeric_not_null: Ajouter une colonne de type NUMERIC avec NOT NULL",
            "-- col_date: Ajouter une colonne de type DATE",
            "-- col_date_not_null: Ajouter une colonne de type DATE avec NOT NULL",
            "-- col_timestamp: Ajouter une colonne de type TIMESTAMP",
            "-- col_timestamp_not_null: Ajouter une colonne de type TIMESTAMP avec NOT NULL",
            "-- col_time: Ajouter une colonne de type TIME",
            "-- col_time_not_null: Ajouter une colonne de type TIME avec NOT NULL",
            "-- col_interval: Ajouter une colonne de type INTERVAL",
            "-- col_interval_not_null: Ajouter une colonne de type INTERVAL avec NOT NULL"
        ],
        "description": "Aide-mémoire pour les opérations CREATE et colonnes"
    },
    "alter_table_add_column": {
        "prefix": "alter_table_add_column",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "\tADD COLUMN ${2:col_name} ${3:data_type};"
        ],
        "description": "Modifier la table pour ajouter une colonne."
    },
    "alter_table_modify_column": {
        "prefix": "alter_table_modify_column",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "\tALTER COLUMN ${2:col_name} SET ${3:property};"
        ],
        "description": "Modifier la table pour changer les propriétés d'une colonne."
    },
    "alter_table_drop_column": {
        "prefix": "alter_table_drop_column",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "\tDROP COLUMN ${2:col_name};"
        ],
        "description": "Modifier la table pour supprimer une colonne."
    },
    "alter_table_add_pk": {
        "prefix": "alter_table_add_pk",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "\tADD CONSTRAINT ${2:pk_name} PRIMARY KEY (${3:col_name});"
        ],
        "description": "Modifier la table pour ajouter une clé primaire."
    },
    "alter_table_add_unique": {
        "prefix": "alter_table_add_unique",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "\tADD CONSTRAINT ${2:unique_name} UNIQUE (${3:col_name});"
        ],
        "description": "Modifier la table pour ajouter une contrainte d'unicité."
    },
    "alter_table_add_fk": {
        "prefix": "alter_table_add_fk",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "\tADD CONSTRAINT ${2:fk_tablename_colname} FOREIGN KEY (${3:col_name})",
            "\t\tREFERENCES ${4:ref_table}(${5:ref_col});"
        ],
        "description": "Modifier la table pour ajouter une contrainte de clé étrangère."
    },
    "alter_table_add_check": {
        "prefix": "alter_table_add_check",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "\tADD CONSTRAINT ${2:check_name} CHECK (${3:condition});"
        ],
        "description": "Modifier la table pour ajouter une contrainte de vérification."
    },
    "alter_sequence_restart": {
        "prefix": "alter_sequence_restart",
        "body": [
            "ALTER SEQUENCE ${1:sequence_name}",
            "\tRESTART WITH ${2:start_value};"
        ],
        "description": "Modifier la séquence pour redémarrer à partir d'une valeur spécifique."
    },
    "alter_sequence_owned_by": {
        "prefix": "alter_sequence_owned_by",
        "body": [
            "ALTER SEQUENCE ${1:sequence_name}",
            "\tOWNED BY ${2:table}.${3:col_name};"
        ],
        "description": "Modifier la séquence pour qu'elle soit liée à une colonne spécifique d'une table."
    },
    "print_alter": {
        "prefix": "print_alter",
        "body": [
            "-- Snippets pour les opérations ALTER :",
            "-- alter_table_add_column: Ajouter une colonne à une table.",
            "-- alter_table_modify_column: Modifier les propriétés d'une colonne dans une table.",
            "-- alter_table_drop_column: Supprimer une colonne d'une table.",
            "-- alter_table_add_pk: Ajouter une contrainte de clé primaire.",
            "-- alter_table_add_unique: Ajouter une contrainte d'unicité.",
            "-- alter_table_add_fk: Ajouter une contrainte de clé étrangère.",
            "-- alter_table_add_check: Ajouter une contrainte de vérification.",
            "-- alter_sequence_restart: Redémarrer une séquence à partir d'une valeur spécifique.",
            "-- alter_sequence_owned_by: Associer une séquence à une colonne spécifique d'une table."
        ],
        "description": "Aide-mémoire pour les opérations ALTER."
    },
    "drop_table_if_exists": {
        "prefix": "drop_table_if_exists",
        "body": [
            "DROP TABLE IF EXISTS ${1:table_name};"
        ],
        "description": "Supprimer une table si elle existe."
    },
    "drop_table_if_exists_cascade": {
        "prefix": "drop_table_if_exists_cascade",
        "body": [
            "DROP TABLE IF EXISTS ${1:table_name} CASCADE;"
        ],
        "description": "Supprimer une table si elle existe avec CASCADE (nécessaire si des dépendances existent)."
    },
    "drop_column": {
        "prefix": "drop_column",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "\tDROP COLUMN ${2:col_name};"
        ],
        "description": "Supprimer une colonne d'une table."
    },
    "drop_constraint": {
        "prefix": "drop_constraint",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "\tDROP CONSTRAINT ${2:constraint_name};"
        ],
        "description": "Supprimer une contrainte d'une table."
    },
    "drop_sequence_if_exists": {
        "prefix": "drop_sequence_if_exists",
        "body": [
            "DROP SEQUENCE IF EXISTS ${1:sequence_name};"
        ],
        "description": "Supprimer une séquence si elle existe."
    },
    "drop_sequence_if_exists_cascade": {
        "prefix": "drop_sequence_if_exists_cascade",
        "body": [
            "DROP SEQUENCE IF EXISTS ${1:sequence_name} CASCADE;"
        ],
        "description": "Supprimer une séquence si elle existe avec CASCADE (nécessaire si la séquence est utilisée dans une clé étrangère ou autre dépendance)."
    },
    "print_drop": {
        "prefix": "print_drop",
        "body": [
            "-- Snippets pour les opérations DROP :",
            "-- drop_table_if_exists: Supprimer une table si elle existe.",
            "-- drop_table_if_exists_cascade: Supprimer une table si elle existe avec CASCADE.",
            "-- drop_column: Supprimer une colonne d'une table.",
            "-- drop_constraint: Supprimer une contrainte d'une table.",
            "-- drop_sequence_if_exists: Supprimer une séquence si elle existe.",
            "-- drop_sequence_if_exists_cascade: Supprimer une séquence si elle existe avec CASCADE."
        ],
        "description": "Aide-mémoire pour les opérations DROP."
    },
    "insert_basic": {
        "prefix": "insert_basic",
        "body": [
            "INSERT INTO ${1:table_name} (${2:col1}, ${3:col2})",
            "\tVALUES (${4:value1}, ${5:value2});"
        ],
        "description": "Insertion basique dans une table."
    },
    "insert_returning": {
        "prefix": "insert_returning",
        "body": [
            "INSERT INTO ${1:table_name} (${2:col1}, ${3:col2})",
            "\tVALUES (${4:value1}, ${5:value2})",
            "\tRETURNING ${6:col_name};"
        ],
        "description": "Insertion avec une clause RETURNING."
    },
    "insert_select": {
        "prefix": "insert_select",
        "body": [
            "INSERT INTO ${1:table_name} (${2:col1}, ${3:col2})",
            "\tSELECT ${4:col1}, ${5:col2}",
            "\tFROM ${6:source_table}",
            "\t\tWHERE ${7:condition};"
        ],
        "description": "Insertion à partir d'une requête SELECT."
    },
    "print_insert": {
        "prefix": "print_insert",
        "body": [
            "-- Snippets pour les opérations INSERT :",
            "-- insert_basic: Insertion basique dans une table.",
            "-- insert_returning: Insertion avec une clause RETURNING.",
            "-- insert_select: Insertion à partir d'une requête SELECT."
        ],
        "description": "Aide-mémoire pour les opérations INSERT."
    },
    "update_basic": {
        "prefix": "update_basic",
        "body": [
            "UPDATE ${1:table_name}",
            "\tSET ${2:col1} = ${3:value1}, ${4:col2} = ${5:value2}",
            "\tWHERE ${6:condition};"
        ],
        "description": "Mise à jour basique d'une ligne dans une table."
    },
    "update_returning": {
        "prefix": "update_returning",
        "body": [
            "UPDATE ${1:table_name}",
            "\tSET ${2:col1} = ${3:value1}, ${4:col2} = ${5:value2}",
            "\tWHERE ${6:condition}",
            "\tRETURNING ${7:col_name};"
        ],
        "description": "Mise à jour avec une clause RETURNING."
    },
    "update_with_join": {
        "prefix": "update_with_join",
        "body": [
            "UPDATE ${1:table_name} t",
            "\tSET ${2:col} = ${3:value}",
            "\tFROM ${4:join_table} jt",
            "\t\tWHERE t.${5:join_column} = jt.${6:join_column} AND ${7:condition};"
        ],
        "description": "Mise à jour avec une jointure (JOIN)."
    },
    "print_update": {
        "prefix": "print_update",
        "body": [
            "-- Snippets pour les opérations UPDATE :",
            "-- update_basic: Mise à jour basique d'une ligne dans une table.",
            "-- update_returning: Mise à jour avec une clause RETURNING.",
            "-- update_with_join: Mise à jour avec une jointure (JOIN)."
        ],
        "description": "Aide-mémoire pour les opérations UPDATE."
    },
    "delete_basic": {
        "prefix": "delete_basic",
        "body": [
            "DELETE FROM ${1:table_name}",
            "\tWHERE ${2:condition};"
        ],
        "description": "Suppression basique de lignes dans une table."
    },
    "delete_returning": {
        "prefix": "delete_returning",
        "body": [
            "DELETE FROM ${1:table_name}",
            "\tWHERE ${2:condition}",
            "\tRETURNING ${3:col_name};"
        ],
        "description": "Suppression avec une clause RETURNING."
    },
    "delete_using": {
        "prefix": "delete_using",
        "body": [
            "DELETE FROM ${1:table_name} t",
            "\tUSING ${2:join_table} jt",
            "\t\tWHERE t.${3:join_column} = jt.${4:join_column} AND ${5:condition};"
        ],
        "description": "Suppression en utilisant une autre table pour la condition."
    },
    "print_delete": {
        "prefix": "print_delete",
        "body": [
            "-- Snippets pour les opérations DELETE :",
            "-- delete_basic: Suppression basique de lignes dans une table.",
            "-- delete_returning: Suppression avec une clause RETURNING.",
            "-- delete_using: Suppression en utilisant une autre table pour la condition."
        ],
        "description": "Aide-mémoire pour les opérations DELETE."
    },
    "create_view": {
        "prefix": "create_view",
        "body": [
            "DROP VIEW IF EXISTS ${1:view_name};",
            "\tCREATE VIEW ${1:view_name} AS",
            "\t\tSELECT ${2:columns}",
            "\t\t\tFROM ${3:table_name}",
            "\t\t\t\tWHERE ${4:condition};"
        ],
        "description": "Créer une vue SQL avec suppression préalable si elle existe."
    },
    "update_view": {
        "prefix": "update_view",
        "body": [
            "CREATE OR REPLACE VIEW ${1:view_name} AS",
            "\tSELECT ${2:columns}",
            "\t\tFROM ${3:table_name}",
            "\t\t\tWHERE ${4:condition};"
        ],
        "description": "Mettre à jour ou créer une vue SQL existante."
    },
    "drop_view": {
        "prefix": "drop_view",
        "body": [
            "DROP VIEW IF EXISTS ${1:view_name};"
        ],
        "description": "Supprimer une vue SQL si elle existe."
    },
    "print_view": {
        "prefix": "print_view",
        "body": [
            "-- Snippets pour les opérations sur les VUES :",
            "-- create_view: Créer une nouvelle vue SQL avec suppression préalable.",
            "-- update_view: Mettre à jour ou créer une vue SQL existante.",
            "-- drop_view: Supprimer une vue SQL si elle existe."
        ],
        "description": "Aide-mémoire pour les opérations sur les VUES."
    },
    "list_columns": {
        "prefix": "list_columns",
        "body": [
            "SELECT column_name, data_type, character_maximum_length, is_nullable, column_default",
            "FROM information_schema.columns",
            "WHERE table_name = '${1:table_name}';"
        ],
        "description": "Lister les colonnes d'une table avec leur type de données, contraintes et valeur par défaut."
    },
    "list_tables_in_schema": {
        "prefix": "list_tables_in_schema",
        "body": [
            "SELECT table_name",
            "FROM information_schema.tables",
            "WHERE table_schema = '${1:schema_name}';"
        ],
        "description": "Lister toutes les tables d'un schéma spécifique."
    },
    "list_indexes_in_table": {
        "prefix": "list_indexes_in_table",
        "body": [
            "SELECT indexname, indexdef",
            "FROM pg_indexes",
            "WHERE tablename = '${1:table_name}';"
        ],
        "description": "Lister tous les index d'une table."
    },
    "list_constraints_in_table": {
        "prefix": "list_constraints_in_table",
        "body": [
            "SELECT constraint_name, constraint_type",
            "FROM information_schema.table_constraints",
            "WHERE table_name = '${1:table_name}';"
        ],
        "description": "Lister toutes les contraintes d'une table."
    },
    "list_sequences_in_schema": {
        "prefix": "list_sequences_in_schema",
        "body": [
            "SELECT sequence_name",
            "FROM information_schema.sequences",
            "WHERE sequence_schema = '${1:schema_name}';"
        ],
        "description": "Lister toutes les séquences d'un schéma spécifique."
    },
    "list_foreign_keys_in_table": {
        "prefix": "list_foreign_keys_in_table",
        "body": [
            "SELECT conname AS constraint_name, conrelid::regclass AS table_name,",
            "       confrelid::regclass AS foreign_table_name",
            "FROM pg_constraint",
            "WHERE conrelid = '${1:table_name}'::regclass AND contype = 'f';"
        ],
        "description": "Lister toutes les clés étrangères d'une table."
    },
    "show_table_size": {
        "prefix": "show_table_size",
        "body": [
            "SELECT pg_size_pretty(pg_total_relation_size('${1:table_name}')) AS size;"
        ],
        "description": "Afficher la taille totale d'une table."
    },
    "show_database_size": {
        "prefix": "show_database_size",
        "body": [
            "SELECT pg_size_pretty(pg_database_size('${1:database_name}')) AS size;"
        ],
        "description": "Afficher la taille d'une base de données."
    },
    "list_schemas": {
        "prefix": "list_schemas",
        "body": [
            "SELECT schema_name",
            "FROM information_schema.schemata;"
        ],
        "description": "Lister tous les schémas de la base de données."
    },
    "describe_table": {
        "prefix": "describe_table",
        "body": [
            "\\d+ ${1:table_name}"
        ],
        "description": "Décrire une table (afficher la structure avec des informations détaillées)."
    },
    "check_sequence_nextval": {
        "prefix": "check_sequence_nextval",
        "body": [
            "SELECT nextval('${1:sequence_name}');"
        ],
        "description": "Vérifier la prochaine valeur d'une séquence."
    },
    "check_sequence_currval": {
        "prefix": "check_sequence_currval",
        "body": [
            "SELECT currval('${1:sequence_name}');"
        ],
        "description": "Vérifier la valeur actuelle d'une séquence."
    },
    "reset_sequence": {
        "prefix": "reset_sequence",
        "body": [
            "SELECT setval('${1:sequence_name}', ${2:new_value}, ${3:true_or_false});"
        ],
        "description": "Réinitialiser la valeur d'une séquence."
    },
    "show_table_ddl": {
        "prefix": "show_table_ddl",
        "body": [
            "SELECT pg_get_tabledef('${1:table_name}'::regclass);"
        ],
        "description": "Afficher la définition DDL d'une table."
    },
    "print_schema": {
        "prefix": "print_schema",
        "body": [
            "-- Snippets pour la gestion des schémas et des données PostgreSQL :",
            "-- list_columns: Lister les colonnes d'une table avec leur type de données, contraintes et valeur par défaut.",
            "-- list_tables_in_schema: Lister toutes les tables d'un schéma spécifique.",
            "-- list_indexes_in_table: Lister tous les index d'une table.",
            "-- list_constraints_in_table: Lister toutes les contraintes d'une table.",
            "-- list_sequences_in_schema: Lister toutes les séquences d'un schéma spécifique.",
            "-- list_foreign_keys_in_table: Lister toutes les clés étrangères d'une table.",
            "-- show_table_size: Afficher la taille totale d'une table.",
            "-- show_database_size: Afficher la taille d'une base de données.",
            "-- list_schemas: Lister tous les schémas de la base de données.",
            "-- describe_table: Décrire une table (structure détaillée).",
            "-- check_sequence_nextval: Vérifier la prochaine valeur d'une séquence.",  
            "-- check_sequence_currval: Vérifier la valeur actuelle d'une séquence.",
            "-- reset_sequence: Réinitialiser la valeur d'une séquence.",
            "-- show_table_ddl: Afficher la définition DDL d'une table."
        ],
        "description": "Aide-mémoire pour la gestion des schémas et des données PostgreSQL."
    },

    "printdbarole": {
        "prefix": "printdbarole",
        "body": [
            "-- Snippets d'administration PostgreSQL pour les rôles:", 
            "-- create_role: Créer un rôle avec toutes les options possibles", 
            "-- create_role_simple: Créer un rôle simple avec LOGIN et mot de passe", 
            "-- create_role_with_admin: Créer un rôle avec un rôle d'administration (IN ROLE)", 
            "-- create_group_role: Créer un rôle de groupe sans LOGIN", 
            "-- create_inherited_group_role: Créer un groupe héritant d'un autre groupe (sans LOGIN)", 
            "-- alter_role: Modifier les propriétés d'un rôle existant", 
            "-- grant_role: Attribuer un rôle à un utilisateur", 
            "-- revoke_role: Révoquer un rôle d'un utilisateur", 
            "-- drop_role: Supprimer un rôle existant", 
            "-- set_role: Assumer temporairement un rôle dans la session actuelle", 
            "-- printdbagrantpriv: Aide-mémoire pour les privilèges GRANT sur les rôles et objets"
        ],
        "description": "Aide-mémoire pour les snippets de gestion des rôles PostgreSQL"
    },

    "create_role": {
        "prefix": "create_role",
        "body": [
            "CREATE ROLE ${1:nom_role} WITH LOGIN PASSWORD '${2:mot_de_passe}' CREATEDB CREATEROLE INHERIT;"
        ],
        "description": "Créer un rôle avec toutes les options principales"
    },

    "create_role_simple": {
        "prefix": "create_role_simple",
        "body": [
            "CREATE ROLE ${1:nom_role} LOGIN PASSWORD '${2:mot_de_passe}';"
        ],
        "description": "Créer un rôle simple avec LOGIN et mot de passe"
    },

    "create_role_with_admin": {
        "prefix": "create_role_with_admin",
        "body": [
            "CREATE ROLE ${1:nom_role} LOGIN PASSWORD '${2:mot_de_passe}' IN ROLE ${3:nom_admin_group_role};"
        ],
        "description": "Créer un rôle avec un rôle d'administration (IN ROLE)"
    },

    "create_group_role": {
        "prefix": "create_group_role",
        "body": [
            "CREATE ROLE ${1:nom_group_role} NOLOGIN;"
        ],
        "description": "Créer un rôle de groupe sans LOGIN"
    },

    "create_inherited_group_role": {
        "prefix": "create_inherited_group_role",
        "body": [
            "CREATE ROLE ${1:nom_child_group_role} NOLOGIN IN ROLE ${2:nom_parent_group_role};"
        ],
        "description": "Créer un groupe héritant d'un autre groupe (sans LOGIN)"
    },

    "alter_role": {
        "prefix": "alter_role",
        "body": [
            "ALTER ROLE ${1:nom_role} WITH CREATEDB NOCREATEROLE INHERIT;"
        ],
        "description": "Modifier les propriétés d'un rôle existant"
    },

    "grant_role": {
        "prefix": "grant_role",
        "body": [
            "GRANT ${1:nom_admin_group_role} TO ${2:nom_role};"
        ],
        "description": "Attribuer un rôle à un utilisateur"
    },

    "revoke_role": {
        "prefix": "revoke_role",
        "body": [
            "REVOKE ${1:nom_admin_group_role} FROM ${2:nom_role};"
        ],
        "description": "Révoquer un rôle d'un utilisateur"
    },

    "drop_role": {
        "prefix": "drop_role",
        "body": [
            "DROP ROLE IF EXISTS ${1:nom_role};"
        ],
        "description": "Supprimer un rôle existant"
    },

    "set_role": {
        "prefix": "set_role",
        "body": [
            "SET ROLE ${1:nom_role};"
        ],
        "description": "Assumer temporairement un rôle dans la session actuelle"
    },

    "printdbagrantpriv": {
        "prefix": "printdbagrantpriv",
        "body": [
            "-- Snippets pour les privilèges GRANT PostgreSQL:", 
            "-- grant_select_table: Accorder le privilège SELECT sur une table", 
            "-- grant_select_column: Accorder le privilège SELECT sur des colonnes spécifiques", 
            "-- grant_insert_table: Accorder le privilège INSERT sur une table", 
            "-- grant_insert_column: Accorder le privilège INSERT sur des colonnes spécifiques", 
            "-- grant_update_table: Accorder le privilège UPDATE sur une table", 
            "-- grant_update_column: Accorder le privilège UPDATE sur des colonnes spécifiques", 
            "-- grant_delete: Accorder le privilège DELETE", 
            "-- grant_truncate: Accorder le privilège TRUNCATE", 
            "-- grant_references_table: Accorder le privilège REFERENCES sur une table", 
            "-- grant_references_column: Accorder le privilège REFERENCES sur des colonnes spécifiques", 
            "-- grant_trigger: Accorder le privilège TRIGGER", 
            "-- grant_create_schema: Accorder le privilège CREATE sur un schéma", 
            "-- grant_create_database: Accorder le privilège CREATE sur une base de données", 
            "-- grant_connect: Accorder le privilège CONNECT sur une base de données", 
            "-- grant_temporary: Accorder le privilège TEMPORARY sur une base de données", 
            "-- grant_execute_function: Accorder le privilège EXECUTE sur une fonction", 
            "-- grant_execute_procedure: Accorder le privilège EXECUTE sur une procédure", 
            "-- grant_usage_schema: Accorder le privilège USAGE sur un schéma", 
            "-- grant_usage_sequence: Accorder le privilège USAGE sur une séquence"
        ],
        "description": "Aide-mémoire pour les snippets de GRANT des privilèges PostgreSQL"
    },
    "grant_select_table": {
        "prefix": "grant_select_table",
        "body": [
            "GRANT SELECT ON TABLE ${1:nom_table} TO ${2:nom_role};"
        ],
        "description": "Accorder le privilège SELECT sur une table"
    },

    "grant_select_column": {
        "prefix": "grant_select_column",
        "body": [
            "GRANT SELECT (${1:colonne}) ON TABLE ${2:nom_table} TO ${3:nom_role};"
        ],
        "description": "Accorder le privilège SELECT sur des colonnes spécifiques"
    },

    "grant_insert_table": {
        "prefix": "grant_insert_table",
        "body": [
            "GRANT INSERT ON TABLE ${1:nom_table} TO ${2:nom_role};"
        ],
        "description": "Accorder le privilège INSERT sur une table"
    },

    "grant_insert_column": {
        "prefix": "grant_insert_column",
        "body": [
            "GRANT INSERT (${1:colonne}) ON TABLE ${2:nom_table} TO ${3:nom_role};"
        ],
        "description": "Accorder le privilège INSERT sur des colonnes spécifiques"
    },

    "grant_update_table": {
        "prefix": "grant_update_table",
        "body": [
            "GRANT UPDATE ON TABLE ${1:nom_table} TO ${2:nom_role};"
        ],
        "description": "Accorder le privilège UPDATE sur une table"
    },

    "grant_update_column": {
        "prefix": "grant_update_column",
        "body": [
            "GRANT UPDATE (${1:colonne}) ON TABLE ${2:nom_table} TO ${3:nom_role};"
        ],
        "description": "Accorder le privilège UPDATE sur des colonnes spécifiques"
    },

    "grant_delete": {
        "prefix": "grant_delete",
        "body": [
            "GRANT DELETE ON TABLE ${1:nom_table} TO ${2:nom_role};"
        ],
        "description": "Accorder le privilège DELETE"
    },

    "grant_truncate": {
        "prefix": "grant_truncate",
        "body": [
            "GRANT TRUNCATE ON TABLE ${1:nom_table} TO ${2:nom_role};"
        ],
        "description": "Accorder le privilège TRUNCATE"
    },

    "grant_references_table": {
        "prefix": "grant_references_table",
        "body": [
            "GRANT REFERENCES ON TABLE ${1:nom_table} TO ${2:nom_role};"
        ],
        "description": "Accorder le privilège REFERENCES sur une table"
    },

    "grant_references_column": {
        "prefix": "grant_references_column",
        "body": [
            "GRANT REFERENCES (${1:colonne}) ON TABLE ${2:nom_table} TO ${3:nom_role};"
        ],
        "description": "Accorder le privilège REFERENCES sur des colonnes spécifiques"
    },

    "grant_trigger": {
        "prefix": "grant_trigger",
        "body": [
            "GRANT TRIGGER ON TABLE ${1:nom_table} TO ${2:nom_role};"
        ],
        "description": "Accorder le privilège TRIGGER"
    },

    "grant_create_schema": {
        "prefix": "grant_create_schema",
        "body": [
            "GRANT CREATE ON SCHEMA ${1:nom_schema} TO ${2:nom_role};"
        ],
        "description": "Accorder le privilège CREATE sur un schéma"
    },

    "grant_create_database": {
        "prefix": "grant_create_database",
        "body": [
            "GRANT CREATE ON DATABASE ${1:nom_database} TO ${2:nom_role};"
        ],
        "description": "Accorder le privilège CREATE sur une base de données"
    },

    "grant_connect": {
        "prefix": "grant_connect",
        "body": [
            "GRANT CONNECT ON DATABASE ${1:nom_database} TO ${2:nom_role};"
        ],
        "description": "Accorder le privilège CONNECT sur une base de données"
    },

    "grant_temporary": {
        "prefix": "grant_temporary",
        "body": [
            "GRANT TEMPORARY ON DATABASE ${1:nom_database} TO ${2:nom_role};"
        ],
        "description": "Accorder le privilège TEMPORARY sur une base de données"
    },

    "grant_execute_function": {
        "prefix": "grant_execute_function",
        "body": [
            "GRANT EXECUTE ON FUNCTION ${1:nom_fonction}(${2:params}) TO ${3:nom_role};"
        ],
        "description": "Accorder le privilège EXECUTE sur une fonction"
    },

    "grant_execute_procedure": {
        "prefix": "grant_execute_procedure",
        "body": [
            "GRANT EXECUTE ON PROCEDURE ${1:nom_procedure}(${2:params}) TO ${3:nom_role};"
        ],
        "description": "Accorder le privilège EXECUTE sur une procédure"
    },

    "grant_usage_schema": {
        "prefix": "grant_usage_schema",
        "body": [
            "GRANT USAGE ON SCHEMA ${1:nom_schema} TO ${2:nom_role};"
        ],
        "description": "Accorder le privilège USAGE sur un schéma"
    },

    "grant_usage_sequence": {
        "prefix": "grant_usage_sequence",
        "body": [
            "GRANT USAGE ON SEQUENCE ${1:nom_sequence} TO ${2:nom_role};"
        ],
        "description": "Accorder le privilège USAGE sur une séquence"
    },

    "printdbarevokepriv": {
        "prefix": "printdbarevokepriv",
        "body": [
            "-- Snippets pour les privilèges REVOKE PostgreSQL:",
            "-- revoke_select_table: Révoquer le privilège SELECT sur une table", 
            "-- revoke_select_column: Révoquer le privilège SELECT sur des colonnes spécifiques", 
            "-- revoke_insert_table: Révoquer le privilège INSERT sur une table", 
            "-- revoke_insert_column: Révoquer le privilège INSERT sur des colonnes spécifiques", 
            "-- revoke_update_table: Révoquer le privilège UPDATE sur une table", 
            "-- revoke_update_column: Révoquer le privilège UPDATE sur des colonnes spécifiques", 
            "-- revoke_delete: Révoquer le privilège DELETE", 
            "-- revoke_truncate: Révoquer le privilège TRUNCATE", 
            "-- revoke_references_table: Révoquer le privilège REFERENCES sur une table", 
            "-- revoke_references_column: Révoquer le privilège REFERENCES sur des colonnes spécifiques", 
            "-- revoke_trigger: Révoquer le privilège TRIGGER", 
            "-- revoke_create_schema: Révoquer le privilège CREATE sur un schéma", 
            "-- revoke_create_database: Révoquer le privilège CREATE sur une base de données", 
            "-- revoke_connect: Révoquer le privilège CONNECT sur une base de données", 
            "-- revoke_temporary: Révoquer le privilège TEMPORARY sur une base de données", 
            "-- revoke_execute_function: Révoquer le privilège EXECUTE sur une fonction", 
            "-- revoke_execute_procedure: Révoquer le privilège EXECUTE sur une procédure", 
            "-- revoke_usage_schema: Révoquer le privilège USAGE sur un schéma", 
            "-- revoke_usage_sequence: Révoquer le privilège USAGE sur une séquence"
        ],
        "description": "Aide-mémoire pour les snippets de REVOKE des privilèges PostgreSQL"
    },

    "revoke_select_table": {
        "prefix": "revoke_select_table",
        "body": [
            "REVOKE SELECT ON TABLE ${1:nom_table} FROM ${2:nom_role};"
        ],
        "description": "Révoquer le privilège SELECT sur une table"
    },
    "revoke_select_column": {
        "prefix": "revoke_select_column",
        "body": [
            "REVOKE SELECT (${1:colonne1}, ${2:colonne2}) ON TABLE ${3:nom_table} FROM ${4:nom_role};"
        ],
        "description": "Révoquer le privilège SELECT sur des colonnes spécifiques"
    },
    "revoke_insert_table": {
        "prefix": "revoke_insert_table",
        "body": [
            "REVOKE INSERT ON TABLE ${1:nom_table} FROM ${2:nom_role};"
        ],
        "description": "Révoquer le privilège INSERT sur une table"
    },
    "revoke_insert_column": {
        "prefix": "revoke_insert_column",
        "body": [
            "REVOKE INSERT (${1:colonne1}, ${2:colonne2}) ON TABLE ${3:nom_table} FROM ${4:nom_role};"
        ],
        "description": "Révoquer le privilège INSERT sur des colonnes spécifiques"
    },
    "revoke_update_table": {
        "prefix": "revoke_update_table",
        "body": [
            "REVOKE UPDATE ON TABLE ${1:nom_table} FROM ${2:nom_role};"
        ],
        "description": "Révoquer le privilège UPDATE sur une table"
    },
    "revoke_update_column": {
        "prefix": "revoke_update_column",
        "body": [
            "REVOKE UPDATE (${1:colonne1}, ${2:colonne2}) ON TABLE ${3:nom_table} FROM ${4:nom_role};"
        ],
        "description": "Révoquer le privilège UPDATE sur des colonnes spécifiques"
    },
    "revoke_delete": {
        "prefix": "revoke_delete",
        "body": [
            "REVOKE DELETE ON TABLE ${1:nom_table} FROM ${2:nom_role};"
        ],
        "description": "Révoquer le privilège DELETE"
    },
    "revoke_truncate": {
        "prefix": "revoke_truncate",
        "body": [
            "REVOKE TRUNCATE ON TABLE ${1:nom_table} FROM ${2:nom_role};"
        ],
        "description": "Révoquer le privilège TRUNCATE"
    },
    "revoke_references_table": {
        "prefix": "revoke_references_table",
        "body": [
            "REVOKE REFERENCES ON TABLE ${1:nom_table} FROM ${2:nom_role};"
        ],
        "description": "Révoquer le privilège REFERENCES sur une table"
    },
    "revoke_references_column": {
        "prefix": "revoke_references_column",
        "body": [
            "REVOKE REFERENCES (${1:colonne1}) ON TABLE ${2:nom_table} FROM ${3:nom_role};"
        ],
        "description": "Révoquer le privilège REFERENCES sur des colonnes spécifiques"
    },
    "revoke_trigger": {
        "prefix": "revoke_trigger",
        "body": [
            "REVOKE TRIGGER ON TABLE ${1:nom_table} FROM ${2:nom_role};"
        ],
        "description": "Révoquer le privilège TRIGGER"
    },
    "revoke_create_schema": {
        "prefix": "revoke_create_schema",
        "body": [
            "REVOKE CREATE ON SCHEMA ${1:nom_schema} FROM ${2:nom_role};"
        ],
        "description": "Révoquer le privilège CREATE sur un schéma"
    },
    "revoke_create_database": {
        "prefix": "revoke_create_database",
        "body": [
            "REVOKE CREATE ON DATABASE ${1:nom_database} FROM ${2:nom_role};"
        ],
        "description": "Révoquer le privilège CREATE sur une base de données"
    },
    "revoke_connect": {
        "prefix": "revoke_connect",
        "body": [
            "REVOKE CONNECT ON DATABASE ${1:nom_database} FROM ${2:nom_role};"
        ],
        "description": "Révoquer le privilège CONNECT sur une base de données"
    },
    "revoke_temporary": {
        "prefix": "revoke_temporary",
        "body": [
            "REVOKE TEMPORARY ON DATABASE ${1:nom_database} FROM ${2:nom_role};"
        ],
        "description": "Révoquer le privilège TEMPORARY sur une base de données"
    },
    "revoke_execute_function": {
        "prefix": "revoke_execute_function",
        "body": [
            "REVOKE EXECUTE ON FUNCTION ${1:nom_fonction}(${2:param_types}) FROM ${3:nom_role};"
        ],
        "description": "Révoquer le privilège EXECUTE sur une fonction"
    },
    "revoke_execute_procedure": {
        "prefix": "revoke_execute_procedure",
        "body": [
            "REVOKE EXECUTE ON PROCEDURE ${1:nom_procedure}(${2:param_types}) FROM ${3:nom_role};"
        ],
        "description": "Révoquer le privilège EXECUTE sur une procédure"
    },
    "revoke_usage_schema": {
        "prefix": "revoke_usage_schema",
        "body": [
            "REVOKE USAGE ON SCHEMA ${1:nom_schema} FROM ${2:nom_role};"
        ],
        "description": "Révoquer le privilège USAGE sur un schéma"
    },
    "revoke_usage_sequence": {
        "prefix": "revoke_usage_sequence",
        "body": [
            "REVOKE USAGE ON SEQUENCE ${1:nom_sequence} FROM ${2:nom_role};"
        ],
        "description": "Révoquer le privilège USAGE sur une séquence"
    },

    "printdbacopy": {
        "prefix": "printdbacopy",
        "body": [
            "-- Snippets pour les commandes \\copy PostgreSQL:",
            "-- copy_csv_with_header: Exporter vers un fichier CSV avec en-tête", 
            "-- copy_csv_without_header: Exporter vers un fichier CSV sans en-tête", 
            "-- copy_tsv_with_header: Exporter vers un fichier TSV avec en-tête", 
            "-- copy_tsv_without_header: Exporter vers un fichier TSV sans en-tête", 
            "-- copy_with_null_replacement: Exporter en remplaçant les valeurs NULL", 
            "-- copy_full_options: Exporter avec toutes les options combinées", 
            "-- copy_schema_table_columns: Exporter des colonnes spécifiques d'une table dans un schéma"
        ],
        "description": "Aide-mémoire pour les snippets de commandes \\copy PostgreSQL"
    },

    "copy_csv_with_header": {
        "prefix": "copy_csv_with_header",
        "body": [
            "\\copy ${1:nom_table} TO '${2:chemin_fichier}.csv' DELIMITER ',' CSV HEADER;"
        ],
        "description": "Exporter des données vers un fichier CSV avec en-tête"
    },

    "copy_csv_without_header": {
        "prefix": "copy_csv_without_header",
        "body": [
            "\\copy ${1:nom_table} TO '${2:chemin_fichier}.csv' DELIMITER ',' CSV;"
        ],
        "description": "Exporter des données vers un fichier CSV sans en-tête"
    },

    "copy_tsv_with_header": {
        "prefix": "copy_tsv_with_header",
        "body": [
            "\\copy ${1:nom_table} TO '${2:chemin_fichier}.tsv' DELIMITER '\\t' CSV HEADER;"
        ],
        "description": "Exporter des données vers un fichier TSV avec en-tête"
    },

    "copy_tsv_without_header": {
        "prefix": "copy_tsv_without_header",
        "body": [
            "\\copy ${1:nom_table} TO '${2:chemin_fichier}.tsv' DELIMITER '\\t' CSV;"
        ],
        "description": "Exporter des données vers un fichier TSV sans en-tête"
    },

    "copy_with_null_replacement": {
        "prefix": "copy_with_null_replacement",
        "body": [
            "\\copy ${1:nom_table} TO '${2:chemin_fichier}.csv' DELIMITER ';' CSV NULL 'non_renseigné';"
        ],
        "description": "Exporter des données avec remplacement des valeurs NULL"
    },

    "copy_full_options": {
        "prefix": "copy_full_options",
        "body": [
            "\\copy ${1:nom_table} TO '${2:chemin_fichier}.csv' DELIMITER ';' CSV HEADER NULL 'non_renseigné';"
        ],
        "description": "Exporter des données avec toutes les options combinées (en-tête, délimiteur personnalisé, et gestion des NULL)"
    },

    "copy_schema_table_columns": {
        "prefix": "copy_schema_table_columns",
        "body": [
            "\\copy (SELECT ${1:colonne1}, ${2:colonne2}, ${3:colonne3} FROM ${4:schema}.${5:nom_table}) TO '${6:chemin_fichier}.csv' DELIMITER ',' CSV HEADER NULL 'non_renseigné';"
        ],
        "description": "Exporter des colonnes spécifiques d'une table dans un schéma avec toutes les options combinées"
    }
} 
