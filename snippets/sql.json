{
    "qt": {
        "prefix": "qt",
        "body": [
            "-----------------",
            "-- QUESTION N° ${1:number}",
            "-----------------",
            ""
        ],
        "description": "Snippet pour ajouter une question avec un nombre"
    },
    "qz": {
        "prefix": "qz",
        "body": [
            "-----------------",
            "-- ${1:title}",
            "-----------------",
            ""
        ],
        "description": "Snippet pour ajouter une section ou un titre"
    },
    "sela": {
        "prefix": "sela",
        "body": [
            "SELECT * FROM ${1:table};"
        ],
        "description": "Faire un SELECT de tout les éléments de la table"
    },
    "where": {
        "prefix": "where",
        "body": [
            "SELECT *",
            "\tFROM ${1:tab_name}",
            "\t\tWHERE ${2:conditions}",
            "\t\t\t;"
        ],
        "description": "Snippet pour les clauses WHERE"
    },
    "group": {
        "prefix": "group",
        "body": [
            "SELECT ${1:col1}, ${2:col2}",
            "\tFROM ${3:table_name}",
            "\t\tGROUP BY ${1:col1}, ${2:col2};",
            "\t\t\t;"
        ],
        "description": "Snippet pour les GROUP BY"
    },
    "having": {
        "prefix": "having",
        "body": [
            "SELECT ${1:col1}, ${2:col2}",
            "\tFROM ${3:table_name}",
            "\t\tHAVING ${4:conditions};",
            "\t\t\t;"
        ],
        "description": "Snippet pour les clauses HAVING"
    },
    "havg": {
        "prefix": "havg",
        "body": [
            "SELECT ${1:col1}, ${2:col2}",
            "\tFROM ${3:table_name}",
            "\t\tHAVING ${4:conditions}",
            "\t\t\tGROUP BY ${1:col1}, ${2:col2};",
            "\t\t\t\t;"
        ],
        "description": "Snippet avec un cas présentant un HAVING avec un GROUP BY"
    },
    "order": {
        "prefix": "order",
        "body": [
            "SELECT ${1:col1}, ${2:col2}",
            "\tFROM ${3:table_name}",
            "\t\tHAVING ${4:conditions}",
            "\t\t\tGROUP BY ${1:col1}, ${2:col2}",
            "\t\t\t\tORDER BY ${5:cle};",
            "\t\t\t\t\t;"
        ],
        "description": "Snippet avec un cas présentant un HAVING avec un GROUP BY et un ORDER BY"
    },
    "gb": {
        "prefix": "gb",
        "body": ["\t\tGROUP BY ${1:column}"],
        "description": "Faire un GROUP BY par colonne"
    },
    "ob": {
        "prefix": "ob",
        "body": ["\t\tORDER BY ${1:column}"],
        "description": "Faire un ORDER BY par colonne"
    },
    "if": {
        "prefix": "if",
        "body": ["IF NOT EXISTS ${1:condition};"],
        "description": "condition IF NOT EXISTS"
    },
    "printlidgen": {
    "prefix": "printext",
    "body": [
        "-- Snippets generaux pour le langage d'interrogation des données  :",
        "-- sela: Faire un SELECT de tout les éléments de la table",
        "-- where : Snippet pour les clauses WHERE",
        "-- group: Snippet pour les GROUP BY",
        "-- having: Snippet pour les clauses HAVING",
        "-- havg: Snippet avec un cas présentant un HAVING avec un GROUP BY",
        "-- order: Snippet avec un cas présentant un HAVING avec un GROUP BY et un ORDER BY",
        "-- gb: Faire un GROUP BY par colonne",
        "-- ob: Faire un ORDER BY par colonne",
        "-- if: condition IF NOT EXISTS"
    ],
    "description": "Aide-mémoire pour les snippets de manipulation de texte"
    },
    "check": {
        "prefix": "check",
        "body": ["CHECK (${1:condition})"],
        "description": "Snippet pour une contrainte de CHECK"
    },
    "add": {
        "prefix": "add",
        "body": ["ALTER TABLE ${1:table_name} ADD CONSTRAINT ${2:constraint};"],
        "description": "Ajout d'une contrainte à une table"
    },
    "seq": {
        "prefix": "seq",
        "body": ["CREATE SEQUENCE IF NOT EXISTS ${1:sequence_name}_seq;"],
        "description": "Créer une séquence si celle-ci n'existe pas"
    },
    "view": {
        "prefix": "view",
        "body": [
            "CREATE VIEW ${1:view_name} AS",
            "\tSELECT *",
            "\t\tFROM ${2:table}",
            "\t\t\tWHERE ${3:condition};",
            "\t\t\t\t;"
        ],
        "description": "Créer et vérifier une vue SQL"
    },
    "table": {
        "prefix": "table",
        "body": [
            "CREATE TABLE IF NOT EXISTS ${1:table_name} (",
            "\t${2:col1} ${3:TYPE},",
            "\t\t${4:col2} ${5:TYPE},",
            "\t\t\t${6:col3} ${7:TYPE}",
            "\t\t\t\t);"
        ],
        "description": "Créer une table SQL"
    },
    "dt": {
        "prefix": "dt",
        "body": ["DROP TABLE IF EXISTS ${1:table_name} CASCADE;"],
        "description": "Supprimer une table si elle existe"
    },
    "dl": {
        "prefix": "dl",
        "body": [
            "DELETE FROM ${1:table_name}",
            "\tWHERE ${2:condition};",
            "\t\t;"
        ],
        "description": "Supprimer une ligne d'une table"
    },
    "ds": {
        "prefix": "ds",
        "body": ["DROP SEQUENCE IF EXISTS ${1:sequence_name} CASCADE;"],
        "description": "Supprimer une séquence si elle existe"
    },
    "dv": {
        "prefix": "dv",
        "body": ["DROP VIEW IF EXISTS ${1:view_name};"],
        "description": "Supprimer une vue si elle existe"
    },
    "printlddgen": {
        "prefix": "printlddgen",
        "body": [
            "-- Snippets généraux pour le langage de définition des données :",
            "-- check: Snippet pour une contrainte de CHECK",
            "-- add: Ajout d'une contrainte à une table",
            "-- seq: Créer une séquence si celle-ci n'existe pas",
            "-- view: Créer et vérifier une vue SQL",
            "-- table: Créer une table SQL",
            "-- dt: Supprimer une table si elle existe",
            "-- dl: Supprimer une ligne d'une table",
            "-- ds: Supprimer une séquence si elle existe",
            "-- dv: Supprimer une vue si elle existe"
        ],
        "description": "Aide-mémoire pour les snippets de langage de définition des données"
    },
    "update": {
        "prefix": "update",
        "body": [
            "UPDATE ${1:table_name}",
            "\tSET ${2:col1} = ${3:value1}, ${4:col2} = ${5:value2}",
            "\tWHERE ${6:condition};"
        ],
        "description": "Update table row"
    },
    "insert": {
        "prefix": "insert",
        "body": [
            "INSERT INTO ${1:table_name}(${2:col1}, ${3:col2})",
            "VALUES (${4:value1}, ${5:value2});"
        ],
        "description": "Insert values into table"
    },
    "df": {
        "prefix": "df",
        "body": [
            "DELETE FROM ${1:table_name}",
            "WHERE ${2:condition};"
        ],
        "description": "Delete from table with condition"
    },
    "pkc": {
        "prefix": "pkc",
        "body": [
            "CONSTRAINT ${1:pk_name} PRIMARY KEY(${2:column})"
        ],
        "description": "Primary key constraint"
    },
    "fkc": {
        "prefix": "fkc",
        "body": [
            "CONSTRAINT ${1:fk_name} FOREIGN KEY(${2:column}) REFERENCES ${3:ref_table}(${4:ref_column})"
        ],
        "description": "Foreign key constraint"
    },
    "pk": {
        "prefix": "pk",
        "body": [
            "${1:pk_name} PRIMARY KEY(${2:column})"
        ],
        "description": "Primary key"
    },
    "fk": {
        "prefix": "fk",
        "body": [
            "${1:fk_name} FOREIGN KEY(${2:column}) REFERENCES ${3:ref_table}(${4:ref_column})"
        ],
        "description": "Foreign key"
    },
    "date": {
        "prefix": "date",
        "body": ["DATE NOT NULL"],
        "description": "Date type with NOT NULL"
    },
    "timestamp": {
        "prefix": "timestamp",
        "body": ["TIMESTAMP NOT NULL"],
        "description": "Timestamp type with NOT NULL"
    },
    "var": {
        "prefix": "var",
        "body": ["VARCHAR(${1:length})"],
        "description": "Varchar type"
    },
    "char": {
        "prefix": "char",
        "body": ["CHAR(${1:length})"],
        "description": "Char type"
    },
    "serial": {
        "prefix": "serial",
        "body": ["SERIAL PRIMARY KEY"],
        "description": "Serial primary key"
    },
    "datep": {
        "prefix": "datep",
        "body": ["date_part(${1:text}, ${2:timestamp})"],
        "description": "Date part function"
    },
    "datet": {
        "prefix": "datet",
        "body": ["date_trunc(${1:text}, ${2:timestamp})"],
        "description": "Date truncation function"
    },
    "cd": {
        "prefix": "cd",
        "body": ["CURRENT_DATE"],
        "description": "Current date"
    },
    "upper": {
    "prefix": "upper",
    "body": ["UPPER(${1:column})"],
    "description": "Convertit une chaîne en majuscules"
    },
    "lower": {
    "prefix": "lower",
    "body": ["LOWER(${1:column})"],
    "description": "Convertit une chaîne en minuscules"
    },
    "initcap": {
    "prefix": "initcap",
    "body": ["INITCAP(${1:column})"],
    "description": "Mets en capitales la première lettre de chaque mot"
    },
    "substr": {
    "prefix": "substr",
    "body": ["SUBSTRING(${1:column} FROM ${2:start} FOR ${3:length})"],
    "description": "Extrait une sous-chaîne"
    },
    "substr_from": {
    "prefix": "substr_from",
    "body": ["SUBSTRING(${1:column} FROM ${2:start})"],
    "description": "Extrait une sous-chaîne avec FROM seulement"
    },
    "length": {
    "prefix": "length",
    "body": ["LENGTH(${1:column})"],
    "description": "Renvoie la longueur de la chaîne"
    },
    "rpad": {
    "prefix": "rpad",
    "body": ["RPAD(${1:column}, ${2:total_length}, '${3:padding_char}')"],
    "description": "Remplit la chaîne à droite jusqu'à la longueur spécifiée"
    },
    "printext": {
    "prefix": "printext",
    "body": [
        "-- Snippets de manipulation de texte :",
        "-- upper: Convertit une chaîne en majuscules",
        "-- lower: Convertit une chaîne en minuscules",
        "-- initcap: Mets en capitales la première lettre de chaque mot",
        "-- substr_from: Extrait une sous-chaîne",
        "-- substr: Extrait une sous-chaîne avec longueur défini",
        "-- length: Renvoie la longueur de la chaîne",
        "-- lpad: Remplit la chaîne à gauche",
        "-- rpad: Remplit la chaîne à droite"
    ],
    "description": "Aide-mémoire pour les snippets de manipulation de texte"
    },
    "abs": {
    "prefix": "abs",
    "body": ["ABS(${1:column})"],
    "description": "Renvoie la valeur absolue"
    },
    "mod": {
    "prefix": "mod",
    "body": ["MOD(${1:column}, ${2:divisor})"],
    "description": "Renvoie le reste de la division"
    },
    "round": {
    "prefix": "round",
    "body": ["ROUND(${1:column}, ${2:decimal_places})"],
    "description": "Arrondit un nombre au nombre de décimales spécifié"
    },
    "round_no_dec": {
    "prefix": "round_no_dec",
    "body": ["ROUND(${1:column})"],
    "description": "Arrondit un nombre sans décimales"
    },
    "trunc": {
    "prefix": "trunc",
    "body": ["TRUNC(${1:column}, ${2:decimal_places})"],
    "description": "Tronque un nombre au nombre de décimales spécifié"
    },
    "trunc_no_dec": {
    "prefix": "trunc_no_dec",
    "body": ["TRUNC(${1:column})"],
    "description": "Tronque un nombre sans décimales"
    },
    "power": {
    "prefix": "power",
    "body": ["POWER(${1:column}, ${2:exponent})"],
    "description": "Élève un nombre à la puissance spécifiée"
    },
    "ceil": {
    "prefix": "ceil",
    "body": ["CEIL(${1:column})"],
    "description": "Arrondir vers le haut avec CEIL"
    },
    "floor": {
    "prefix": "floor",
    "body": ["FLOOR(${1:column})"],
    "description": "Arrondir vers le bas avec FLOOR"
    },
   "printmath": {
    "prefix": "printmath",
    "body": [
        "-- Snippets de fonctions mathématiques :",
        "-- abs: Renvoie la valeur absolue",
        "-- mod: Renvoie le reste de la division (modulo)",
        "-- round: Arrondit un nombre avec décimales",
        "-- round_no_dec: Arrondit un nombre sans décimales",
        "-- trunc: Tronque un nombre avec décimales",
        "-- trunc_no_dec: Tronque un nombre sans décimales",
        "-- power: Élève un nombre à la puissance spécifiée",
        "-- ceil: Arrondit vers le haut",
        "-- floor: Arrondit vers le bas"
    ],
    "description": "Aide-mémoire pour les fonctions mathématiques"
    },
    "where_equal": {
    "prefix": "where_equal",
    "body": ["WHERE ${1:column} = ${2|cond,'cond','\"cond\"|}"],
    "description": "Condition WHERE avec égalité"
    },
    "where_not_equal": {
    "prefix": "where_not_equal",
    "body": [
        "WHERE ${1:column} ${2|<>,!=|} ${3|cond,'cond','\"cond\"|}"
    ],
    "description": "Condition WHERE avec inégalité"
    },
    "where_less_than": {
    "prefix": "where_lt",
    "body": ["WHERE ${1:column} < ${2|cond,'cond','\"cond\"|}"],
    "description": "Condition WHERE avec inférieur à"
    },
    "where_greater_than": {
    "prefix": "where_gt",
    "body": ["WHERE ${1:column} > ${2|cond,'cond','\"cond\"|}"],
    "description": "Condition WHERE avec supérieur à"
    },
    "where_less_equal": {
    "prefix": "where_le",
    "body": ["WHERE ${1:column} <= ${2|cond,'cond','\"cond\"|}"],
    "description": "Condition WHERE avec inférieur ou égal"
    },
    "where_greater_equal": {
    "prefix": "where_ge",
    "body": ["WHERE ${1:column} >= ${2|cond,'cond','\"cond\"|}"],
    "description": "Condition WHERE avec supérieur ou égal"
    },
    "where_in": {
    "prefix": "where_in",
    "body": [
        "WHERE ${1:column} IN (${2|'cond1', 'cond2', 'cond3'|})"
    ],
    "description": "Condition WHERE avec IN"
    },
    "where_is_null": {
    "prefix": "where_is_null",
    "body": ["WHERE ${1:column} IS NULL"],
    "description": "Condition WHERE avec IS NULL"
    },
    "where_is_not_null": {
    "prefix": "where_is_not_null",
    "body": ["WHERE ${1:column} IS NOT NULL"],
    "description": "Condition WHERE avec IS NOT NULL"
    },
    "where_between": {
    "prefix": "where_between",
    "body": [
        "WHERE ${1:column} BETWEEN ${2|cond1,'cond1','\"cond1\"|} AND ${3|cond2,'cond2','\"cond2\"|}"
    ],
    "description": "Condition WHERE avec BETWEEN"
    },
    "where_not_between": {
    "prefix": "where_not_between",
    "body": [
        "WHERE ${1:column} NOT BETWEEN ${2|cond1,'cond1','\"cond1\"|} AND ${3|cond2,'cond2','\"cond2\"|}"
    ],
    "description": "Condition WHERE avec NOT BETWEEN"
    },
    "where_like": {
    "prefix": "where_like",
    "body": [
        "WHERE ${1:column} LIKE ${2|'%cond%', '_cond_'|}"
    ],
    "description": "Condition WHERE avec LIKE"
    },
    "where_and_or": {
    "prefix": "where_and_or",
    "body": [
        "WHERE (${1:cond1} OR ${2:cond2}) AND ${3:cond3}"
    ],
    "description": "Condition WHERE avec AND et OR"
    },
    "where_or_and": {
    "prefix": "where_or_and",
    "body": [
        "WHERE ${1:cond1} OR (${2:cond2} AND ${3:cond3})"
    ],
    "description": "Condition WHERE avec OR et AND imbriqués"
    },
    "printwhere": {
    "prefix": "printwhere",
    "body": [
        "-- Snippets des clauses WHERE :",
        "-- where_equal: Condition d'égalité",
        "-- where_not_equal: Condition de non-égalité (<>, !=)",
        "-- where_less_than: Condition inférieur à",
        "-- where_greater_than: Condition supérieur à",
        "-- where_less_equal: Condition inférieur ou égal",
        "-- where_greater_equal: Condition supérieur ou égal",
        "-- where_in: Condition IN",
        "-- where_is_null: Condition IS NULL",
        "-- where_is_not_null: Condition IS NOT NULL",
        "-- where_between: Condition BETWEEN",
        "-- where_not_between: Condition NOT BETWEEN",
        "-- where_like: Condition LIKE avec % et _",
        "-- where_and_or: Condition AND avec OR imbriqués",
        "-- where_or_and: Condition OR avec AND imbriqués"
    ],
    "description": "Aide-mémoire des clauses WHERE"
    },
    "alias": {
    "prefix": "alias",
    "body": ["${1:column_name} AS \"${2:alias_name}\""],
    "description": "Renommer une colonne avec AS"
    },
    "concat": {
    "prefix": "concat",
    "body": ["CONCAT(${1:expr1}, ${2:expr2})"],
    "description": "Concaténer des chaînes de caractères"
    },
    "concat_pipe": {
    "prefix": "concat_pipe",
    "body": ["${1:column1} || ' ' || ${2:column2}"],
    "description": "Concaténation avec les opérateurs pipes `||`"
    },
    "coalesce": {
    "prefix": "coalesce",
    "body": ["COALESCE(${1:column}, ${2:'default_value'})"],
    "description": "Remplacer les valeurs nulles avec COALESCE"
    },
    "case_simple": {
    "prefix": "case_simple",
    "body": [
        "CASE ${1:column}",
        "\tWHEN '${2:value1}' THEN '${3:result1}'",
        "\tWHEN '${4:value2}' THEN '${5:result2}'",
        "\tELSE '${6:default}'",
        "END AS \"${7:alias}\""
    ],
    "description": "Utiliser CASE pour transformer des valeurs"
    },
    "case_title": {
    "prefix": "case_title",
    "body": [
        "CASE ${1:titre}",
        "\tWHEN 'M' THEN 'Monsieur'",
        "\tWHEN 'MME' THEN 'Madame'",
        "\tWHEN 'MLLE' THEN 'Mademoiselle'",
        "\tELSE ''",
        "END"
    ],
    "description": "Transformation des civilités avec CASE"
    },
    "printmiseenpage": {
    "prefix": "printmiseenpage",
    "body": [
        "-- Snippets de mise en page SQL :",
        "-- alias: Renommer une colonne avec AS",
        "-- concat: Concaténer des colonnes avec CONCAT()",
        "-- concat_pipe: Concaténer des colonnes avec ||",
        "-- coalesce: Remplacer les valeurs nulles avec COALESCE",
        "-- case_simple: Utiliser CASE pour transformer des valeurs",
        "-- case_title: Transformation des civilités avec CASE"
    ],
    "description": "Aide-mémoire pour les snippets de mise en page SQL"
    },
    "to_char_dd_mm_yyyy": {
    "prefix": "to_char_dd_mm_yyyy",
    "body": ["TO_CHAR(${1:date}, 'DD/MM/YYYY')"],
    "description": "Convertir la date au format DD/MM/YYYY"
    },
    "to_char_dd_mm_yy": {
    "prefix": "to_char_dd_mm_yy",
    "body": ["TO_CHAR(${1:date}, 'DD/MM/YY')"],
    "description": "Convertir la date au format DD/MM/YY"
    },
    "to_char_dd_mm_dash_yyyy": {
    "prefix": "to_char_dd_mm_dash_yyyy",
    "body": ["TO_CHAR(${1:date}, 'DD-MM-YYYY')"],
    "description": "Convertir la date au format DD-MM-YYYY"
    },
    "to_char_day_dd_month_yyyy": {
    "prefix": "to_char_day_dd_month_yyyy",
    "body": ["TO_CHAR(${1:date}, 'FMDay DD FMMonth YYYY')"],
    "description": "Convertir la date au format complet (ex: Jeudi 12 Janvier 1963)"
    },
    "to_char_yyyy_mm_dd": {
    "prefix": "to_char_yyyy_mm_dd",
    "body": ["TO_CHAR(${1:date}, 'YYYY-MM-DD')"],
    "description": "Convertir la date au format ISO (YYYY-MM-DD)"
    },
    "to_date_dd_mm_yyyy_dash": {
    "prefix": "to_date_dd_mm_yyyy_dash",
    "body": ["TO_DATE(${1:'12-01-1963'}, 'DD-MM-YYYY')"],
    "description": "Conversion d'une chaîne '12-01-1963' en date"
    },
    "to_date_dd_mm_yy_dash": {
    "prefix": "to_date_dd_mm_yy_dash",
    "body": ["TO_DATE(${1:'12-01-63'}, 'DD-MM-YY')"],
    "description": "Conversion d'une chaîne '12-01-63' en date"
    },
    "to_date_dd_mm_yyyy_slash": {
    "prefix": "to_date_dd_mm_yyyy_slash",
    "body": ["TO_DATE(${1:'12/01/1963'}, 'DD/MM/YYYY')"],
    "description": "Conversion d'une chaîne '12/01/1963' en date"
    },
    "to_date_dd_mm_yy_slash": {
    "prefix": "to_date_dd_mm_yy_slash",
    "body": ["TO_DATE(${1:'12/01/63'}, 'DD/MM/YY')"],
    "description": "Conversion d'une chaîne '12/01/63' en date"
    },
    "to_date_yyyy_mm_dd_dash": {
    "prefix": "to_date_yyyy_mm_dd_dash",
    "body": ["TO_DATE(${1:'1963-01-12'}, 'YYYY-MM-DD')"],
    "description": "Conversion d'une chaîne '1963-01-12' en date"
    },
    "to_date_yyyymmdd": {
    "prefix": "to_date_yyyymmdd",
    "body": ["TO_DATE(${1:'19630112'}, 'YYYYMMDD')"],
    "description": "Conversion d'une chaîne '19630112' en date"
    },
    "printdate": {
    "prefix": "printdate",
    "body": [
        "-- Snippets de gestion des dates :",
        "-- to_char_dd_mm_yyyy: Convertir au format DD/MM/YYYY",
        "-- to_char_dd_mm_yy: Convertir au format DD/MM/YY",
        "-- to_char_dd_mm_dash_yyyy: Convertir au format DD-MM-YYYY",
        "-- to_char_day_dd_month_yyyy: Convertir au format Jeudi 12 Janvier 1963",
        "-- to_char_dd_month_yyyy: Convertir au format 12 Janvier 1963",
        "-- to_char_yyyy_mm_dd: Convertir au format YYYY-MM-DD",
        "-- to_date_dd_mm_yyyy_dash: Conversion '12-01-1963' en date",
        "-- to_date_dd_mm_yy_dash: Conversion '12-01-63' en date",
        "-- to_date_dd_mm_yyyy_slash: Conversion '12/01/1963' en date",
        "-- to_date_dd_mm_yy_slash: Conversion '12/01/63' en date",
        "-- to_date_yyyy_mm_dd_dash: Conversion '1963-01-12' en date",
        "-- to_date_yyyymmdd: Conversion '19630112' en date"
    ],
    "description": "Aide-mémoire pour les snippets de gestion des dates"
    },
    "join": {
        "prefix": "join",
        "body": [
            "SELECT *",
            "FROM ${1:tab1_name} ${2:alias1}",
            "\tJOIN ${3:tab2_name} ${4:alias2} ON ${2:alias1}.${5:cle} = ${4:alias2}.${6:cle};"
        ],
        "description": "Snippet for JOIN"
    },
    "join2": {
        "prefix": "join2",
        "body": [
            "SELECT ${1:col}, ${2:col2}",
            "FROM ${3:tableA} A, ${4:tableB} B",
            "WHERE A.${5:cle} = B.${6:cle};"
        ],
        "description": "Snippet for multi-table SELECT with implicit join"
    },
    "ljoin": {
        "prefix": "ljoin",
        "body": [
            "SELECT *",
            "FROM ${1:tab1_name} ${2:alias1}",
            "\tLEFT JOIN ${3:tab2_name} ${4:alias2} ON ${2:alias1}.${5:cle} = ${4:alias2}.${6:cle};"
        ],
        "description": "Snippet for LEFT JOIN"
    },
    "rjoin": {
        "prefix": "rjoin",
        "body": [
            "SELECT *",
            "FROM ${1:tab1_name} ${2:alias1}",
            "\tRIGHT JOIN ${3:tab2_name} ${4:alias2} ON ${2:alias1}.${5:cle} = ${4:alias2}.${6:cle};"
        ],
        "description": "Snippet for RIGHT JOIN"
    },
    "fout": {
        "prefix": "fout",
        "body": [
            "SELECT ${1:col}",
            "FROM ${2:tab1_name} ${3:alias1}",
            "\tFULL OUTER JOIN ${4:table2_name} ${5:alias2} ON ${3:alias1}.${6:cle} = ${5:alias2}.${7:cle}",
            "WHERE ${3:alias1}.${8:cle} IS NULL OR ${5:alias2}.${9:cle} IS NULL;"
        ],
        "description": "Snippet for FULL OUTER JOIN"
    },
    "fjoin": {
    "prefix": "fjoin",
    "body": [
        "JOIN ${1:tab2_name} ${2:alias2} ON ${3:alias1}.${4:cle} = ${2:alias2}.${5:cle}"
    ],
    "description": "Snippet pour INNER JOIN avec extension"
    },
    "join_more": {
    "prefix": "join_more",
    "body": [
        "JOIN ${1:tab3_name} ${2:alias3} ON ${3:alias2}.${4:cle} = ${2:alias3}.${5:cle}"
    ],
    "description": "Ajouter une autre jointure INNER JOIN"
    },
    "fljoin": {
    "prefix": "fljoin",
    "body": [
        "LEFT JOIN ${1:tab2_name} ${2:alias2} ON ${3:alias1}.${4:cle} = ${2:alias2}.${5:cle}"
    ],
    "description": "Snippet pour LEFT JOIN avec extension"
    },
    "ljoin_more": {
    "prefix": "ljoin_more",
    "body": [
        "LEFT JOIN ${1:tab3_name} ${2:alias3} ON ${3:alias2}.${4:cle} = ${2:alias3}.${5:cle}"
    ],
    "description": "Ajouter une autre jointure LEFT JOIN"
    },
    "frjoin": {
    "prefix": "frjoin",
    "body": [
        "RIGHT JOIN ${1:tab2_name} ${2:alias2} ON ${3:alias1}.${4:cle} = ${2:alias2}.${5:cle}"
    ],
    "description": "Snippet pour RIGHT JOIN avec extension"
    },
    "rjoin_more": {
    "prefix": "rjoin_more",
    "body": [
        "RIGHT JOIN ${1:tab3_name} ${2:alias3} ON ${3:alias2}.${4:cle} = ${2:alias3}.${5:cle}"
    ],
    "description": "Ajouter une autre jointure RIGHT JOIN"
    },
    "union": {
    "prefix": "union",
    "body": [
        "${1:query1}",
        "UNION",
        "${2:query2}"
    ],
    "description": "Snippet pour UNION sans ALL"
    },
    "union_all": {
    "prefix": "union_all",
    "body": [
        "${1:query1}",
        "UNION ALL",
        "${2:query2}"
    ],
    "description": "Snippet pour UNION avec ALL"
    },
    "intersect": {
    "prefix": "intersect",
    "body": [
        "${1:query1}",
        "INTERSECT",
        "${2:query2}"
    ],
    "description": "Snippet pour INTERSECT sans ALL"
    },
    "intersect_all": {
    "prefix": "intersect_all",
    "body": [
        "${1:query1}",
        "INTERSECT ALL",
        "${2:query2}"
    ],
    "description": "Snippet pour INTERSECT avec ALL"
    },
    "except": {
    "prefix": "except",
    "body": [
        "${1:query1}",
        "EXCEPT",
        "${2:query2}"
    ],
    "description": "Snippet pour EXCEPT sans ALL"
    },
    "except_all": {
    "prefix": "except_all",
    "body": [
        "${1:query1}",
        "EXCEPT ALL",
        "${2:query2}"
    ],
    "description": "Snippet pour EXCEPT avec ALL"
    },
    "printjoin": {
    "prefix": "printjoin",
    "body": [
        "-- Snippets de jointures :",
        "-- join: INNER JOIN",
        "-- join2: INNER JOIN avec une clause WHERE",
        "-- fjoin: INNER JOIN avec extension",
        "-- join_more: Ajouter une autre jointure INNER JOIN",
        "-- ljoin: LEFT JOIN",
        "-- fljoin: LEFT JOIN avec extension",
        "-- ljoin_more: Ajouter une autre jointure LEFT JOIN",
        "-- rjoin: RIGHT JOIN",
        "-- rjoin: RIGHT JOIN avec extension",
        "-- rjoin_more: Ajouter une autre jointure RIGHT JOIN",
        "-- fout: FULL OUTER JOIN",
        "-- union: UNION sans ALL",
        "-- union_all: UNION avec ALL",
        "-- intersect: INTERSECT sans ALL",
        "-- intersect_all: INTERSECT avec ALL",
        "-- except: EXCEPT sans ALL",
        "-- except_all: EXCEPT avec ALL"
    ],
    "description": "Aide-mémoire pour les snippets de jointures et opérations d'ensembles"
    },
    "avg": {
        "prefix": "avg",
        "body": ["AVG(${1:column})"],
        "description": "Calculates the average of a column"
    },
    "count": {
        "prefix": "count",
        "body": ["COUNT(${1:column})"],
        "description": "Counts the number of non-null values in a column"
    },
    "count_star": {
        "prefix": "count_star",
        "body": ["COUNT(*)"],
        "description": "Counts all rows, including nulls"
    },
    "count_expr": {
        "prefix": "count_expr",
        "body": ["COUNT(${1:expression})"],
        "description": "Counts the result of an expression"
    },
    "max": {
        "prefix": "max",
        "body": ["MAX(${1:column})"],
        "description": "Finds the maximum value in a column"
    },
    "min": {
        "prefix": "min",
        "body": ["MIN(${1:column})"],
        "description": "Finds the minimum value in a column"
    },
    "sum": {
        "prefix": "sum",
        "body": ["SUM(${1:column})"],
        "description": "Calculates the sum of a column"
    },
    "group_concat": {
        "prefix": "group_concat",
        "body": ["GROUP_CONCAT(${1:column})"],
        "description": "Concatenates the values of a column"
    },
    "stddev": {
        "prefix": "stddev",
        "body": ["STDDEV(${1:column})"],
        "description": "Calculates the standard deviation of a column"
    },
    "variance": {
        "prefix": "variance",
        "body": ["VARIANCE(${1:column})"],
        "description": "Calculates the variance of a column"
    },
    "median": {
        "prefix": "median",
        "body": ["MEDIAN(${1:column})"],
        "description": "Calculates the median value of a column"
    },
    "grouping": {
        "prefix": "grouping",
        "body": ["GROUPING(${1:column})"],
        "description": "Indicates whether a column is aggregated or not"
    },
    "percentile_cont": {
        "prefix": "percentile_cont",
        "body": [
            "PERCENTILE_CONT(${1:percentile})",
            "WITHIN GROUP (ORDER BY ${2:column})"
        ],
        "description": "Calculates a percentile using continuous distribution"
    },
    "percentile_disc": {
        "prefix": "percentile_disc",
        "body": [
            "PERCENTILE_DISC(${1:percentile})",
            "WITHIN GROUP (ORDER BY ${2:column})"
        ],
        "description": "Calculates a percentile using discrete distribution"
    },
    "corr": {
        "prefix": "corr",
        "body": ["CORR(${1:column_x}, ${2:column_y})"],
        "description": "Calculates the correlation between two columns"
    },
    "covar_pop": {
        "prefix": "covar_pop",
        "body": ["COVAR_POP(${1:column_x}, ${2:column_y})"],
        "description": "Calculates the population covariance of two columns"
    },
    "covar_samp": {
        "prefix": "covar_samp",
        "body": ["COVAR_SAMP(${1:column_x}, ${2:column_y})"],
        "description": "Calculates the sample covariance of two columns"
    },
    "mode": {
        "prefix": "mode",
        "body": ["MODE() WITHIN GROUP (ORDER BY ${1:column})"],
        "description": "Calculates the mode (most frequent value)"
    },
    "printgroup": {
        "prefix": "printgroup",
        "body": [
            "-- Snippets for Group Functions:",
            "-- avg: Calculates the average",
            "-- count: Counts the non-null values",
            "-- count_star: Counts all rows",
            "-- count_expr: Counts the result of an expression",
            "-- max: Finds the maximum value",
            "-- min: Finds the minimum value",
            "-- sum: Calculates the sum",
            "-- group_concat: Concatenates values",
            "-- stddev: Calculates the standard deviation",
            "-- variance: Calculates the variance",
            "-- median: Calculates the median",
            "-- grouping: Indicates aggregation in GROUP BY",
            "-- percentile_cont: Continuous percentile calculation",
            "-- percentile_disc: Discrete percentile calculation",
            "-- corr: Correlation between two columns",
            "-- covar_pop: Population covariance",
            "-- covar_samp: Sample covariance",
            "-- mode: Mode within group"
        ],
        "description": "Aide-mémoire for SQL group functions"
    },
    "having_eq": {
        "prefix": "having_eq",
        "body": ["HAVING ${1:agg_func}(${2:column}) = ${3:value}"],
        "description": "HAVING clause with equality condition"
    },
    "having_gt": {
        "prefix": "having_gt",
        "body": ["HAVING ${1:agg_func}(${2:column}) > ${3:value}"],
        "description": "HAVING clause with greater than condition"
    },
    "having_lt": {
        "prefix": "having_lt",
        "body": ["HAVING ${1:agg_func}(${2:column}) < ${3:value}"],
        "description": "HAVING clause with less than condition"
    },
    "having_gte": {
        "prefix": "having_gte",
        "body": ["HAVING ${1:agg_func}(${2:column}) >= ${3:value}"],
        "description": "HAVING clause with greater than or equal condition"
    },
    "having_lte": {
        "prefix": "having_lte",
        "body": ["HAVING ${1:agg_func}(${2:column}) <= ${3:value}"],
        "description": "HAVING clause with less than or equal condition"
    },
    "having_not_equal": {
        "prefix": "having_not_equal",
        "body": ["HAVING ${1:agg_func}(${2:column}) <> ${3:value}"],
        "description": "HAVING clause with not equal condition"
    },
    "having_and_or": {
        "prefix": "having_and_or",
        "body": [
            "HAVING (${1:agg_func}(${2:column}) ${3:operator} ${4:value})",
            "    AND (${5:agg_func2}(${6:column2}) ${7:operator2} ${8:value2})"
        ],
        "description": "HAVING clause with AND and OR"
    },
    "having_between": {
        "prefix": "having_between",
        "body": [
            "HAVING ${1:agg_func}(${2:column}) BETWEEN ${3:value1} AND ${4:value2}"
        ],
        "description": "HAVING clause with BETWEEN"
    },
    "having_not_between": {
        "prefix": "having_not_between",
        "body": [
            "HAVING ${1:agg_func}(${2:column}) NOT BETWEEN ${3:value1} AND ${4:value2}"
        ],
        "description": "HAVING clause with NOT BETWEEN"
    },
    "having_in": {
        "prefix": "having_in",
        "body": [
            "HAVING ${1:agg_func}(${2:column}) IN (${3:value1}, ${4:value2}, ${5:value3})"
        ],
        "description": "HAVING clause with IN condition"
    },
    "having_not_in": {
        "prefix": "having_not_in",
        "body": [
            "HAVING ${1:agg_func}(${2:column}) NOT IN (${3:value1}, ${4:value2}, ${5:value3})"
        ],
        "description": "HAVING clause with NOT IN condition"
    },
    "having_is_null": {
        "prefix": "having_is_null",
        "body": [
            "HAVING ${1:agg_func}(${2:column}) IS NULL"
        ],
        "description": "HAVING clause with IS NULL"
    },
    "having_is_not_null": {
        "prefix": "having_is_not_null",
        "body": [
            "HAVING ${1:agg_func}(${2:column}) IS NOT NULL"
        ],
        "description": "HAVING clause with IS NOT NULL"
    },
    "printhaving": {
        "prefix": "printhaving",
        "body": [
            "-- Snippets for HAVING clauses:",
            "-- having_eq: HAVING clause with equality condition",
            "-- having_gt: HAVING clause with greater than condition",
            "-- having_lt: HAVING clause with less than condition",
            "-- having_gte: HAVING clause with greater than or equal condition",
            "-- having_lte: HAVING clause with less than or equal condition",
            "-- having_not_equal: HAVING clause with not equal condition",
            "-- having_and_or: HAVING clause with AND/OR conditions",
            "-- having_between: HAVING clause with BETWEEN",
            "-- having_not_between: HAVING clause with NOT BETWEEN",
            "-- having_in: HAVING clause with IN condition",
            "-- having_not_in: HAVING clause with NOT IN condition",
            "-- having_is_null: HAVING clause with IS NULL",
            "-- having_is_not_null: HAVING clause with IS NOT NULL"
        ],
        "description": "Aide-mémoire for HAVING clauses"
    },
    "create_table_if_exists": {
        "prefix": "create_table_if_exists",
        "body": [
            "CREATE TABLE IF NOT EXISTS ${1:table_name} (",
            "    ${2:col_name} ${3:data_type}${4:, other_columns}",
            ");"
        ],
        "description": "Create table with IF NOT EXISTS"
    },
    "create_sequence_if_exists": {
        "prefix": "create_sequence_if_exists",
        "body": [
            "CREATE SEQUENCE IF NOT EXISTS ${1:sequence_name};"
        ],
        "description": "Create sequence with IF NOT EXISTS"
    },
    "create_table_with_sequence": {
        "prefix": "create_table_with_sequence",
        "body": [
            "CREATE TABLE IF NOT EXISTS ${1:table_name} (",
            "    ${2:col_name} ${3:data_type},",
            "    ${4:seq_col} SERIAL PRIMARY KEY USING ${5:sequence_name}",
            ");"
        ],
        "description": "Create table with sequence for primary key"
    },
    "print_create": {
        "prefix": "print_create",
        "body": [
            "-- Snippets for CREATE operations:",
            "-- create_table_if_exists: Create a table with IF NOT EXISTS",
            "-- create_sequence_if_exists: Create a sequence with IF NOT EXISTS",
            "-- create_table_with_sequence: Create a table with sequence as primary key"
        ],
        "description": "Print for CREATE operations"
    },
    "alter_table_add_column": {
        "prefix": "alter_table_add_column",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "ADD COLUMN ${2:col_name} ${3:data_type};"
        ],
        "description": "Alter table to add a column"
    },
    "alter_table_modify_column": {
        "prefix": "alter_table_modify_column",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "ALTER COLUMN ${2:col_name} SET ${3:property};"
        ],
        "description": "Alter table to modify a column"
    },
    "alter_table_drop_column": {
        "prefix": "alter_table_drop_column",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "DROP COLUMN ${2:col_name};"
        ],
        "description": "Alter table to drop a column"
    },
    "alter_table_add_pk": {
        "prefix": "alter_table_add_pk",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "ADD CONSTRAINT ${2:pk_name} PRIMARY KEY (${3:col_name});"
        ],
        "description": "Alter table to add a primary key"
    },
    "alter_table_add_unique": {
        "prefix": "alter_table_add_unique",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "ADD CONSTRAINT ${2:unique_name} UNIQUE (${3:col_name});"
        ],
        "description": "Alter table to add a unique constraint"
    },
    "alter_table_add_fk": {
        "prefix": "alter_table_add_fk",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "ADD CONSTRAINT ${2:fk_name} FOREIGN KEY (${3:col_name})",
            "REFERENCES ${4:ref_table}(${5:ref_col});"
        ],
        "description": "Alter table to add a foreign key constraint"
    },
    "alter_table_add_check": {
        "prefix": "alter_table_add_check",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "ADD CONSTRAINT ${2:check_name} CHECK (${3:condition});"
        ],
        "description": "Alter table to add a check constraint"
    },
    "alter_sequence": {
        "prefix": "alter_sequence",
        "body": [
            "ALTER SEQUENCE ${1:sequence_name}",
            "RESTART WITH ${2:start_value};"
        ],
        "description": "Alter sequence to restart from a value"
    },
    "print_alter": {
        "prefix": "print_alter",
        "body": [
            "-- Snippets for ALTER operations:",
            "-- alter_table_add_column: Add a column to a table",
            "-- alter_table_modify_column: Modify a column in a table",
            "-- alter_table_drop_column: Drop a column from a table",
            "-- alter_table_add_pk: Add a primary key constraint",
            "-- alter_table_add_unique: Add a unique constraint",
            "-- alter_table_add_fk: Add a foreign key constraint",
            "-- alter_table_add_check: Add a check constraint",
            "-- alter_sequence: Alter sequence to restart"
        ],
        "description": "Print for ALTER operations"
    },
    "drop_table_if_exists": {
        "prefix": "drop_table_if_exists",
        "body": [
            "DROP TABLE IF EXISTS ${1:table_name};"
        ],
        "description": "Drop table with IF EXISTS"
    },
    "drop_column": {
        "prefix": "drop_column",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "DROP COLUMN ${2:col_name};"
        ],
        "description": "Drop a column from a table"
    },
    "drop_constraint": {
        "prefix": "drop_constraint",
        "body": [
            "ALTER TABLE ${1:table_name}",
            "DROP CONSTRAINT ${2:constraint_name};"
        ],
        "description": "Drop a constraint from a table"
    },
    "drop_sequence_if_exists": {
        "prefix": "drop_sequence_if_exists",
        "body": [
            "DROP SEQUENCE IF EXISTS ${1:sequence_name};"
        ],
        "description": "Drop sequence with IF EXISTS"
    },
    "print_drop": {
        "prefix": "print_drop",
        "body": [
            "-- Snippets for DROP operations:",
            "-- drop_table_if_exists: Drop a table with IF EXISTS",
            "-- drop_column: Drop a column from a table",
            "-- drop_constraint: Drop a constraint from a table",
            "-- drop_sequence_if_exists: Drop a sequence with IF EXISTS"
        ],
        "description": "Print for DROP operations"
    },
    "insert_basic": {
        "prefix": "insert_basic",
        "body": [
            "INSERT INTO ${1:table_name} (${2:col1}, ${3:col2})",
            "VALUES (${4:value1}, ${5:value2});"
        ],
        "description": "Basic INSERT into table"
    },
    "insert_returning": {
        "prefix": "insert_returning",
        "body": [
            "INSERT INTO ${1:table_name} (${2:col1}, ${3:col2})",
            "VALUES (${4:value1}, ${5:value2})",
            "RETURNING ${6:col_name};"
        ],
        "description": "INSERT with RETURNING clause"
    },
    "insert_select": {
        "prefix": "insert_select",
        "body": [
            "INSERT INTO ${1:table_name} (${2:col1}, ${3:col2})",
            "SELECT ${4:col1}, ${5:col2}",
            "FROM ${6:source_table}",
            "WHERE ${7:condition};"
        ],
        "description": "INSERT from SELECT query"
    },
    "print_insert": {
        "prefix": "print_insert",
        "body": [
            "-- Snippets for INSERT operations:",
            "-- insert_basic: Basic INSERT statement",
            "-- insert_returning: INSERT with RETURNING clause",
            "-- insert_select: INSERT using a SELECT query"
        ],
        "description": "Print for INSERT operations"
    },
    "update_basic": {
        "prefix": "update_basic",
        "body": [
            "UPDATE ${1:table_name}",
            "SET ${2:col1} = ${3:value1}, ${4:col2} = ${5:value2}",
            "WHERE ${6:condition};"
        ],
        "description": "Basic UPDATE table row"
    },
    "update_returning": {
        "prefix": "update_returning",
        "body": [
            "UPDATE ${1:table_name}",
            "SET ${2:col1} = ${3:value1}, ${4:col2} = ${5:value2}",
            "WHERE ${6:condition}",
            "RETURNING ${7:col_name};"
        ],
        "description": "UPDATE with RETURNING clause"
    },
    "update_with_join": {
        "prefix": "update_with_join",
        "body": [
            "UPDATE ${1:table_name} t",
            "SET ${2:col} = ${3:value}",
            "FROM ${4:join_table} jt",
            "WHERE t.${5:join_column} = jt.${6:join_column} AND ${7:condition};"
        ],
        "description": "UPDATE with JOIN"
    },
    "print_update": {
        "prefix": "print_update",
        "body": [
            "-- Snippets for UPDATE operations:",
            "-- update_basic: Basic UPDATE statement",
            "-- update_returning: UPDATE with RETURNING clause",
            "-- update_with_join: UPDATE with JOIN clause"
        ],
        "description": "Print for UPDATE operations"
    },
    "delete_basic": {
        "prefix": "delete_basic",
        "body": [
            "DELETE FROM ${1:table_name}",
            "WHERE ${2:condition};"
        ],
        "description": "Basic DELETE from table"
    },
    "delete_returning": {
        "prefix": "delete_returning",
        "body": [
            "DELETE FROM ${1:table_name}",
            "WHERE ${2:condition}",
            "RETURNING ${3:col_name};"
        ],
        "description": "DELETE with RETURNING clause"
    },
    "delete_using": {
        "prefix": "delete_using",
        "body": [
            "DELETE FROM ${1:table_name} t",
            "USING ${2:join_table} jt",
            "WHERE t.${3:join_column} = jt.${4:join_column} AND ${5:condition};"
        ],
        "description": "DELETE using another table"
    },
    "print_delete": {
        "prefix": "print_delete",
        "body": [
            "-- Snippets for DELETE operations:",
            "-- delete_basic: Basic DELETE statement",
            "-- delete_returning: DELETE with RETURNING clause",
            "-- delete_using: DELETE using another table"
        ],
        "description": "Print for DELETE operations"
    },
    "create_view": {
        "prefix": "create_view",
        "body": [
            "CREATE VIEW ${1:view_name} AS",
            "SELECT ${2:columns}",
            "FROM ${3:table_name}",
            "WHERE ${4:condition};"
        ],
        "description": "Create a SQL view"
    },
    "update_view": {
        "prefix": "update_view",
        "body": [
            "CREATE OR REPLACE VIEW ${1:view_name} AS",
            "SELECT ${2:columns}",
            "FROM ${3:table_name}",
            "WHERE ${4:condition};"
        ],
        "description": "Update an existing SQL view"
    },
    "drop_view": {
        "prefix": "drop_view",
        "body": [
            "DROP VIEW IF EXISTS ${1:view_name};"
        ],
        "description": "Drop a SQL view"
    },
    "print_view": {
        "prefix": "print_view",
        "body": [
            "-- Snippets for Views:",
            "-- create_view: Create a new SQL view",
            "-- update_view: Create or replace an existing view",
            "-- drop_view: Drop a view if exists"
        ],
        "description": "Print for View operations"
    }
}
